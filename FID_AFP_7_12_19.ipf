#pragma rtGlobals=1		// Use modern global access method.#pragma version = 5.00		//   single Coil NMR/NPDG monitoring  Water/ fsweep for flipping field.#include <Keyword-Value>#include <Strings as Lists> //user1 = control// first run init()//Version 1.2		Includes SetParameters to Fit (and NIAFP at the end)//Version 1.1		Includes CoilUtilities:Qscan;  Improved AFPF interface//Version 1.0  	Still need to remove extranious fitting.  Sent to NIST and SNS 2/09//Gordon Jones//Please DO NOT HESITATE to call with questions//office (315) 859-4697//home (315) 853-2793//cell (315) 527-3866//=========================HARDWARE SETUP  =========================////AO_1:		DAC output //AI_3:		ADC intput//Run AO_1 pulse output through 5kohm then through crossed diodes in serial.  10V/5kohm = 2mA.  NI625x can drive at most 5mA so 2mA is safe.//							The diodes take the input side out of the system when recieving.//Coil:  Tune the coil for best results.  Use a resistor (1k?) across the capacitor to limit the Q.  Tuning is not necessary, but helps signal to noise.//From the coil run across 2kohm, then limit the signal size with crossed diodes to ground.  Just having the diodes would limit the pulse across the coil//							 to a diode drop.  The resistor should be large compared to the impedance of the coil at resonance.//							After the limiting diodes you can go through a preamplifier, then another set of limiting diodes, if you wish.//Menu SetupMenu "Macros" 	"NIFIDInit"	" "	"NIFIDpanel"	"NIFIDDAQError"	"NIFIDDAQreset"Endmacro NIFIDinit()	If (exists("NMRscannum") == 0)		variable/g NMRscannum = 0	endif		make/o/D/n=1000 TimeHistory	make/o/T/n=1000 StringHistory	make/o/n=1000 AmpHistory	make/o/n=1000 FreqHistory	make/o/n=1000 T2History	make/o/n=1000 PhaseHistory	make/o/n=1000 ErrorHistory	make/o/n=1000 PDirectionHistory	setscale d, 0, 1, "dat", TimeHistory		TimeHistory[NMRscannum,*]=NaN;AmpHistory[NMRscannum,*]=NaN;FreqHistory[NMRscannum,*]=NaN;T2History[NMRscannum,*]=NaN;	PhaseHistory[NMRscannum,*]=NaN;ErrorHistory[NMRscannum,*]=NaN;PDirectionHistory[NMRscannum,*]=NaN;		make/o/n=20 DIOinfo = NaN	make/o Xup, Yup			//to fix odd offset 	NIFIDparaminit()					//Sets up NIFIDParam wave with NIFID and  NIFID fitting parameters which might be useful to save	GeneralNIFIDInit()			//Sets up GeneralNIFIDParam wave with settings for multiple sweeps etc.   This is a way to pass info to control panel	 NIFIDpanel()		 NIFIDDAQreset()	 NIFID_NIDAQinit()End// ======================  NIFID =================================function NIFIDparamInit()				//Sets up default parameters for  NIFID and  NIFID fitting	variable/g NMRScannum	make/o/n=40  NIFIDParam 	 NIFIDParam[0] = 36.0e3	 			// NIFIDParam[0] = frequency	 NIFIDParam[1] = 0.0005				// NIFIDParam[1] = Pulse Width	 NIFIDParam[2] = 0.5					// NIFIDParam[2] = RF_Amp	  (5@10x atten, gain = 100, 11/02/hamilton)	 NIFIDParam[3] = 2.07 //+1			// NIFIDParam[3] = B field (Analog Out #0)	 NIFIDParam[4] = 0.06				// NIFIDParam[4] = readout time, sec	 NIFIDParam[5]	= 2.07				// NIFIDParam[5] = resting Bfield voltage	 NIFIDParam[6]	= 1000				// NIFIDParam[6] = Low Pass Filter Frequency (different from FID)	 NIFIDParam[7] = 0.002				// NIFIDParam[7] = mute time after pulse is finished//	 NIFIDParam[8] = 0.001				// NOT USED 				                                      NIFIDParam[8] = Lockin gain//	 NIFIDParam[9] = 0.0003	  			// NOT USED 				                                      NIFIDParam[9] = Lockin time constant	 NIFIDParam[10] = 0					// USED ONLY FOR AFP					   NIFIDParam[10] = GPIB flag.  1=use GPIB   	 NIFIDParam[11]  = 4					//  NIFIDParam[11] =  Fit Type (Decaying Sine to X, Exponential, Polynomial, Decaying Sine to XY)	 NIFIDParam[12]  = 1					//  NIFIDParam[12] = SineXY Fit: Amplitude Initial Guess	 NIFIDParam[13]  = 100				//  NIFIDParam[13] = SineXY Fit: Frequency Initial Guess	 NIFIDParam[14]  = 0.01				//  NIFIDParam[14] = SineXY Fit: T2 Initial Guess	 NIFIDParam[15] = 0					//  NIFIDParam[15] = SineXY Fit: Phase Initial Guess	 NIFIDParam[16] = 0					//  NIFIDParam[16] = SineXY Fit:  Relative Phase between x and y (0 or 1)								 NIFIDParam[17]  = 0					//  NIFIDParam[17] = Fit start time (THIS IS T0 FOR AMPLITUDE and Start for FFT)	 NIFIDParam[18]  = 10				//  NIFIDParam[18] = End Fit Time	 NIFIDParam[19] =  NIFIDParam[17]	//  NIFIDParam[19] = start fitting range for R fits	 NIFIDParam[20] = 10					//  NIFIDParam[20] = end fitting range for R fits	 NIFIDParam[21] =  NIFIDParam[17]		//  NIFIDParam[21] = start for FFT	 NIFIDParam[22] = 1200				//  NIFIDParam[22] = Fit range max for FFT		 NIFIDParam[23] = 0					//  NIFIDParam[23] = Position in B sweep process	 NIFIDParam[24] = 0					//  NIFIDParam[24] = Position in F sweep process	 NIFIDParam[25] = 0					//  NIFIDParam[25] = Polarization Direction 	 NIFIDParam[26] = 1				//  NIFIDParam[25] = Max Signal Size for ADC gain, 10,5,2,1,0.5,0.2, 0.1	 	 NIFIDParam[27] = 0.1					//  NIFIDParam[27] = Amplitude from fit	 NIFIDParam[28] = 0.1					//  NIFIDParam[28] = Frequency from fit 	 NIFIDParam[29] = 0.1					//  NIFIDParam[29] = T2 from fit	 NIFIDParam[30] = 0.1					//  NIFIDParam[30] = Phase from fit	 NIFIDParam[31] = 0.1					//  NIFIDParam[31] = Relative Phase from fit	 	 NIFIDParam[32] = 0					//  NIFIDParam[32] = AO0 output used for RF, 0=Bfield, 1=RF amp for AFPF	 NIFIDParam[33] = 2					//  NIFIDParam[33] = Analog Ouput Channel for AFPF (if using NI board, not GPIB)	 	 NIFIDParam[34] = 1					// Lockin Mode:  1 = Computer;		2 = mixer (only x);	3 = Lockin (x and y)	 NIFIDParam[35] = 1					// RF Mode:  1 = NI Board;		2 = GPIB Func. Gen.EndFunction GeneralNIFIDinit()	WAVE  NIFIDParam	make/o/n=54 GeneralNIFIDParam	make/o/T/n=15	GeneralNIFIDParamStrings	 	GeneralNIFIDParamStrings[0] = "xup"	//Graph string	GeneralNIFIDParamStrings[7] = "9"		// NOT USED FOR NIFID								FID function generator GPIB address	GeneralNIFIDParamStrings[8] = "8"		// NOT USED FOR NIFID								Lockin GPIB address	GeneralNIFIDParamStrings[9] = "10"	// AFP function genearator GPIB address	GeneralNIFIDParamStrings[10] = ""		//String of waves to be ignored		GeneralNIFIDParam[0] 	= 0	 		//GeneralNIFIDParam[0] = 1==Show Raw Data (DAQXup) window after  NIFIDfit	GeneralNIFIDParam[1] 	= 2.07		//GeneralNIFIDParam[1] = Bfield Setting (Analog Out #0) (before  NIFIDSetField)	GeneralNIFIDParam[2] 	= NaN		//GeneralNIFIDParam[2] = Current Bfield (Analog Out #0) (After  NIFIDSetField)	GeneralNIFIDParam[3] 	= 1			//GeneralNIFIDParam[3] = 1==Show FFT window after  NIFIDfit	GeneralNIFIDParam[4] 	= 1			//GeneralNIFIDParam[4] = 1==Show R window after  NIFIDfit	GeneralNIFIDParam[5]	= 1			//GeneralNIFIDParam[5] = SpinDown: Wait Before Start	//GeneralNIFIDParam[6]	= 4			//GeneralNIFIDParam[6] = SpinDown: First Wait	GeneralNIFIDParam[7] 	= 8			//GeneralNIFIDParam[7] = SpinDown: Time Interval	GeneralNIFIDParam[8] 	= 0			//GeneralNIFIDParam[8] = SpinDownFit: First ScanNum	GeneralNIFIDParam[9] 	= 0	  		//GeneralNIFIDParam[9] = SpinDownFit: Last Scan Num	GeneralNIFIDParam[10]  = 0			// GeneralNIFIDParam[10] =SpinDownFit: NMRLoss (not percent)	GeneralNIFIDParam[11]  = 5			// GeneralNIFIDParam[11] =  NMRLoss number of sweeps	GeneralNIFIDParam[12]  = 0			// GeneralNIFIDParam[12] = NMRLossFit:  First Scan Num	GeneralNIFIDParam[13]  = 0			// GeneralNIFIDParam[13] = NMRLossFit:  Last Scan Num	GeneralNIFIDParam[14]  = 0			// GeneralNIFIDParam[14] = 	GeneralNIFIDParam[15] = 0.3			// GeneralNIFIDParam[15] = Rate: Time Interval	GeneralNIFIDParam[16] = 1			// GeneralNIFIDParam[15] = Rate:  Total Time			GeneralNIFIDParam[17]  = 0			// GeneralNIFIDParam[17] = Rate: Initial Kill	GeneralNIFIDParam[18]  = 0			// GeneralNIFIDParam[18] = Rate: First Scan Num	GeneralNIFIDParam[19]  = 0			// GeneralNIFIDParam[19] = Rate: Last Scan Num	GeneralNIFIDParam[20] = 0			// GeneralNIFIDParam[20] = 	GeneralNIFIDParam[21] = 0			// GeneralNIFIDParam[21] = KillWaves:  First Scan Num							GeneralNIFIDParam[22]  = 500			// GeneralNIFIDParam[22] = KillWaves:  Lastg Scan Num	GeneralNIFIDParam[23]  = 0			// GeneralNIFIDParam[23] =   Start NMRScanNum for AFPloss	GeneralNIFIDParam[24] = 0			// GeneralNIFIDParam[24] =   End NMRScanNum for AFPloss	GeneralNIFIDParam[25] = 0			// GeneralNIFIDParam[25] = Set DIO: channel							GeneralNIFIDParam[26]  = 0			// GeneralNIFIDParam[26] = Set DIO: Value	GeneralNIFIDParam[27]  = 0			// GeneralNIFIDParam[27] = Read DIO: channel	GeneralNIFIDParam[28]  = 0			// NOT USED FOR NIFID								GeneralNIFIDParam[28] = GPIB Read: Response Value		GeneralNIFIDParam[29]  = 2.07			// GeneralNIFIDParam[29] = AFPF B Field	GeneralNIFIDParam[30] = 5			// GeneralNIFIDParam[30] = AFPF Amplitude	GeneralNIFIDParam[31] = 35300		// GeneralNIFIDParam[31] = AFP Start Frequency		GeneralNIFIDParam[32] = 2		// GeneralNIFIDParam[32] = 	number of widths in sweep	GeneralNIFIDParam[33] = 25			// GeneralNIFIDParam[33] = 	AFP Sweep Frequency Rate	GeneralNIFIDParam[34] = 4.5			// GeneralNIFIDParam[34] = 	AFP Start Field	GeneralNIFIDParam[35] = 8.5			// GeneralNIFIDParam[35] = 	AFP Stop Field	GeneralNIFIDParam[36] = 1.5			// GeneralNIFIDParam[36] = 	AFP Sweep Field Rate			GeneralNIFIDParam[37] = 4		// GeneralNIFIDParam[37] =  Wait time at the top of an AFPB up and down sweep	GeneralNIFIDParam[38] = 101000		// GeneralNIFIDParam[38] = rf frequency	GeneralNIFIDParam[39] = 8			// GeneralNIFIDParam[39] = rf amplitude		GeneralNIFIDParam[40] =1			// GeneralNIFIDParam[40] = Number of AFPsweeps		GeneralNIFIDParam[41]=20000		//GeneralNIFIDParam[41]= Qscan Start	GeneralNIFIDParam[42]=45000		//GeneralNIFIDParam[42]= Qscan Stop	GeneralNIFIDParam[43]=1000			//GeneralNIFIDParam[43]= Qscan Step		GeneralNIFIDParam[44] = 5				//NMR Loss sweeps before automatic AFPF Loss	GeneralNIFIDParam[45] = 5				//NMR Loss sweeps before automatic AFPF Loss	GeneralNIFIDParam[46] = 0				//NMR scannum before automatic AFPF Loss: NMRloss start	GeneralNIFIDParam[47] = 1				//NMR scannum before automatic AFPF Loss: NMRloss end	GeneralNIFIDParam[48] = 3				//NMR scannum after automatic AFPF Loss: NMRloss start	GeneralNIFIDParam[49] = 4				//NMR scannum after automatic AFPF Loss: NMRloss endEndfunction HelpWindow()	DoWindow/K Help_Window	NewPanel/k=1/W=(200,50,200+600,50+600) as "Help_Window"	DoWindow/C  Help_Window	variable y0=20				titlebox help1, pos ={20,y0}, frame = 0, title="RF = GPIB Func. Gen."	y0=y0+15;	titlebox help2, pos ={20,y0}, frame = 0, title="\t\t Box RF Input from RF Signal"	y0=y0+15;	titlebox help3, pos ={20,y0}, frame = 0, title="\t\t Box RF Control from User 1:  jumpers: User1--P0.5, User2--P0.4, P0.6--PFI9/P2.1, P0.7--PFI8/P2.0 "	y0=y0+15;	titlebox help4, pos ={20,y0}, frame = 0, title="\t\t Box Coil to 25.5 uH coil + 270pF + 12ft RG58/AU + 4.7kohm --> 1.13(10) MHz "	y0=y0+10;		y0=y0+15;	titlebox help10, pos ={20,y0}, frame = 0, title="\t Lock-In = Lock-In Amp"	y0=y0+15;	titlebox help11, pos ={20,y0}, frame = 0, title="\t\t RF Sync to Lock-In Ref In"	y0=y0+15;	titlebox help12, pos ={20,y0}, frame = 0, title="\t\t Box Lock-In Output to (opt) preamp to Lock-In Amp Signal In"	y0=y0+15;	titlebox help13, pos ={20,y0}, frame = 0, title="\t\t Lock-In X output to AI3 on NI board; \t Lock-In Y output to AI4 on NI board "	y0=y0+15;	titlebox help14, pos ={20,y0}, frame = 0, title="\t\t Lock-In:  Time Const:  300us;\t 1Mohm/30pF Impedance; \t 50ohm Ref impedance; \t External Ref Trig;"	y0=y0+10;		y0=y0+15;	titlebox help20, pos ={20,y0}, frame = 0, title="\t Lock-In = Mixer"	y0=y0+15;	titlebox help21, pos ={20,y0}, frame = 0, title="\t\t RF Sync through resistor chain to L (local osc) on ZAD-6 mixer"	y0=y0+15;	titlebox help22, pos ={20,y0}, frame = 0, title="\t\t Box Lock-In Output to (opt) preamp to I (intermediate freq) on mixer"	y0=y0+15;	titlebox help23, pos ={20,y0}, frame = 0, title="\t\t R (RF freq) on mixer to (optional) preamp to AI3 on NI board"endfunction callNIFID()	 NIFID()	return  NIFIDfit("xup")endfunction  NIFID()	variable amp	WAVE xup, yup	WAVE  NIFIDparam, GeneralNIFIDParam	WAVE/T  GeneralNIFIDParamStrings	Wave/t StringHistory	WAVE TimeHistory, AmpHistory, FreqHistory, T2History, PhaseHistory, ErrorHistory, PDirectionHistory	variable/g NMRScannum 	variable frequency, width, RFamp, Bfield,Tmute, Tread, GPIBflag, RestFreq, LockinTau	variable GainScale	frequency =  NIFIDparam[0]	width =  NIFIDparam[1]	RFamp= NIFIDParam[2]	Bfield =  NIFIDparam[3]	Tmute =  NIFIDparam[7]	Tread =  NIFIDparam[4]//	GPIBflag =  NIFIDparam[10]	RestFreq =  NIFIDparam[6]	variable NIDAQmaxVoltage=9.95		 NIFIDSetDigitalIO(0,1)			//Set a relay for pickup coil if necessary  (chan, value)	 NIFIDSetField(Bfield)				//Only works if NIFIDParam[32]=0			 NIFIDDSPpulse(frequency, width, RFAmp, Tmute,Tread)		 NIFIDSetDigitalIO(0,0)			//Set a relay for pickup coil if necessary  (chan, value)	GainScale=1		wavestats/Q xup	variable tmp1, tmp2	tmp1 = max(abs(V_max), abs(V_min))	xup = xup - V_avg	wavestats/Q yup	tmp2 = max(abs(V_max), abs(V_min))	yup = yup - V_avg	if (max(tmp1, tmp2)>NIDAQmaxVoltage)		Printf "\rERROR:  Offscale   #%d\r", NMRscannum +1		beep; beep; beep;		ErrorHistory[NMRscannum + 1] = 1	endif	duplicate/o xup rup 	xup *= GainScale*1000	yup *= GainScale *1000	rup = sqrt(abs(xup^2+yup^2))		NMRscannum = NMRscannum + 1	string upxname, upyname, uprname, paramname	upxname = "xup" + num2str(NMRscannum)	upyname = "yup" + num2str(NMRscannum)	uprname = "rup" + num2str(NMRscannum)	paramname = "NIFIDParam" + num2str(NMRscannum)	duplicate xup $upxname	duplicate yup $upyname	duplicate rup $uprname	duplicate  NIFIDparam $paramname		amp =  NIFIDfit(upxname)	StringHistory[NMRScannum]="NIFID"	PDirectionHistory[NMRScanNum]=NIFIDParam[25]	return ampEndfunction  NIFIDDSPpulse(freq, width, RFamp, DTmute, Tread)	//sends RF to AO1, pulse to P0.7 and P0.5, read to P0.6 and P0.4	variable freq, width, RFamp, DTmute, Tread			// Hardwire (on breakout box) P0.7 to PF2 (read), 	WAVE  NIFIDParam, Xup, Yup										// Hardwire P0.6 to PF1 (pulse),  P0.5 to USR1 (pulse)	WAVE DIOinfo										//mutetime may be negative														//makes a wave to produce RF pulse on analog out.	variable AOtimestep = 2.7e-6	//For analog output pulse.  	variable AItimestep = 2.7e-6		//For reading in	variable LowPassFreq = NIFIDparam[6]	variable MaxSigSize = NIFIDParam[26]	variable mutebarchan = 7	variable mutechan = 4	variable pulse1chan=6	variable pulse2chan = 5	variable mutetime = width+DTmute	variable LockInmode = NIFIDParam[34]	variable RFmode = NIFIDParam[35]	if (mutetime<0)		mutetime =0	endif	fDAQmx_WaveformStop("DEV1")if (LockInmode == 2)			//mixer	NIFIDParam[11]=3		// fit to sinX onlyendifif (RFmode==2)		print "aCORN"		GPIBinit()		sleep/s 1		FIDWrFuncGen_freq(freq)		FIDWrFuncGen_ampl(RFamp)		sleep/s 3endif		//Set Up DSP output wave		variable npnts =width/AOtimestep		make/o/n=(npnts+5) OutWave		setscale/p x, 0, AOtimestep, "sec", OutWave		Outwave = RFamp*sin(2*3.14159*freq*x)					Outwave[npnts]=OutWave[npnts-1]*exp(-0.5)		//provides a gentle reentry to avoid sharp spikes.		Outwave[npnts+1]=OutWave[npnts-1]*exp(-1)		Outwave[npnts+2]=OutWave[npnts-1]*exp(-1.5)		Outwave[npnts+3]=OutWave[npnts-1]*exp(-2)		Outwave[npnts+4]=0 	//Set Up input waves	make/o/n=(round(Tread/AItimestep)) DAQXup, DAQYup		SetScale/P x, 0, AItimestep, "s", DAQXup, DAQYup			//Set Up Digital waves to be run at 100kHz clock	//	variable clocktstep= 1e-5				//100kHz clock for pulse	variable clocktstep = AItimestep			//for ai clock	make/o/B/N=(100+round(max(mutetime,width)/clocktstep)) pulse1wave=0,  pulse2wave=0	, mutewave=0, mutebarwave=1	setscale/p x,0, clocktstep, pulse1wave, pulse2wave, mutebarwave, mutewave		variable i	for (i=0;i<width/clocktstep;i=i+1)		pulse1wave[i]=1		pulse2wave[i]=1	endfor	for (i=0;i<=(mutetime)/clocktstep;i=i+1)		mutebarwave[i]=0		mutewave[i]=1	endfor	//	mutebarwave[numpnts(mutebarwave)-1]=0	setscale/p x,0, 1, pulse1wave, pulse2wave, mutebarwave, mutewave	string pulse1device	sprintf pulse1device "/Dev1/port0/line%d", pulse1chan	string pulse2device	sprintf pulse2device "/Dev1/port0/line%d", pulse2chan	string mutebardevice	sprintf mutebardevice "/Dev1/port0/line%d", mutebarchan	string mutedevice	sprintf mutedevice "/Dev1/port0/line%d", mutechan	string linespec	sprintf linespec "%s,%s,%s, %s", pulse1device, pulse2device, mutebardevice, mutedevice		fDAQmx_DIO_finished(pulse1device,DIOinfo[pulse1chan])	fDAQmx_DIO_finished(pulse2device,DIOinfo[pulse2chan])	fDAQmx_DIO_finished(mutebardevice,DIOinfo[mutebarchan])	fDAQmx_DIO_finished(mutedevice,DIOinfo[mutechan])	//Generate RF output.  Note:  this waits for PFI1 (wired to P0.6 or P0.5)					//DAQmx_WaveformGen /DEV="DEV1" /NPRD=1 /STRT /TRIG={"/Dev1/PFI1"} "OutWave, 1, -10,10"if (RFmode == 1)				//NI Board		DAQmx_WaveformGen /DEV="DEV1" /NPRD=1 /STRT /TRIG={"/Dev1/Ai/starttrigger"} "OutWave, 1, -10, 10"endif		//Read Signal input.  NOTE:  this waits for PFI2  (wired to P0.7)					//	DAQmx_scan/dev="Dev1"/ave=1 /BKG /TRIG={"/Dev1/PFI2",1} WAVES="DAQXup, 0/Diff;DAQYup,1/Diff"			// For going directly into the DAQ board.  As fast as possible to get past Nyquist Freq.			//make/o/n=1e4 Xup			//SetScale/P x, 0, (1/0.5e6), "s", Xup			//DAQmx_scan/dev="Dev1"/ave=1 /BKG /TRIG={"/Dev1/PFI2"} WAVES="xup, 0/Diff;"			// Start Digital waves which control output and input											//Note:  DIO output uses Counter0	DAQmx_DIO_Config/DEV="DEV1"/DIR=1/LGRP=1/WAVE={pulse1wave, pulse2wave,mutebarwave,mutewave}/CLK={"/Dev1/ai/sampleclock",1}  linespec	string ScanSetupString	sprintf ScanSetupString, "DAQXup, 3/Diff, %g, %g;  DAQYup, 4/Diff, %g, %g;", -1*MaxSigSize, MaxSigSize, -1*MaxSigSize, MaxSigSize	print ScanSetupString		//DAQmx_scan/dev="Dev1"/ave=1   WAVES="DAQXup, 0/Diff;DAQYup,1/Diff"		//DAQmx_scan/dev="Dev1"/ave=1   WAVES="DAQXup, 3/Diff, -10, 10"	DAQmx_scan/dev="Dev1"/ave=1   WAVES=ScanSetupString	DIOinfo[pulse1chan]= V_DAQmx_DIO_TaskNumber	DIOinfo[pulse2chan]= V_DAQmx_DIO_TaskNumber	DIOinfo[mutebarchan]= V_DAQmx_DIO_TaskNumber	DIOinfo[mutechan]= V_DAQmx_DIO_TaskNumber		//For reference	DAQmx_CTR_OutputPulse/DEV="DEV1"/DELY=0.0001/FREQ={10000,0.5}/NPLS=(numpnts(pulsewave)+2) 0 		duplicate/o DAQXup, DAQXupfilter	duplicate/o DAQYup, DAQYupfilter, frog		//Remove pulse period	if (1==1)		variable Nmute=ceil(width/aitimestep)		variable Newlength= numpnts(DAQXupfilter)-Nmute		i=0		do			DAQXupfilter[i]=DAQXupfilter[i+Nmute]			DAQYupfilter[i]=DAQYupfilter[i+Nmute]			i=i+1		while (i<NewLength)		Redimension/N=(NewLength) DAQXupfilter, DAQYupfilter	endif	if (LockInmode == 2 || LockInmode == 3)	freq = 0endifif (RFmode == 2)	FIDWrFuncGen_freq(1)	FIDWrFuncGen_ampl(0.01)endifif (LockInmode ==2 || LockInmode == 3)				//mixer or Lock-In Amp	filter("DAQXupfilter", "DAQYupfilter", "Xup", "Yup", freq, LowPassFreq)else												//Computer Lock-In	digitallockin("DAQXupfilter", "Xup", "Yup", freq)	filter("Xup", "Yup", "Xup", "Yup", freq, LowPassFreq)endif		//Remove added mute period	if (1==1)				Nmute=ceil(DTmute/deltax(Xup))		Newlength= numpnts(Xup)-Nmute		i=0		do			Xup[i]=Xup[i+Nmute]			Yup[i]=Yup[i+Nmute]			i=i+1		while (i<NewLength)		Redimension/N=(NewLength) Xup, Yup	endifendfunction digitallockin(inwave, outwavex, outwavey, freq)	string inwave, outwavex, outwavey	variable freq	variable order = 4		//LOCKIN	duplicate/o $inwave filteredwavex, filteredwavey	filteredwavex = filteredwavex *cos(2*PI*freq*x)	filteredwavey = filteredwavey*sin(-2*PI*freq*x)		duplicate/o filteredwavex $outwavex	duplicate/o filteredwavey $outwaveyendfunction filter(inwavex, inwavey, outwavex, outwavey,freq, LowPassFreq)	string inwavex, inwavey, outwavex, outwavey	variable freq, LowPassFreq	variable order = 4	variable decimation=5e4		//Hz		duplicate/o $inwavex filteredwavex	duplicate/o $inwavey filteredwavey		//LOCKIN//	duplicate/o $inwave filteredwavex, filteredwavey//	filteredwavex = filteredwavex *cos(2*PI*freq*x)//	filteredwavey = filteredwavey*sin(2*PI*freq*x)		//FILTER	variable deltafreq = 1/deltax(filteredwavex)	variable filtermin=(freq-LowPassFreq)/deltafreq	variable filtermax=(LowPassFreq)/deltafreq	if (filtermax>0.40)		filtermax = 0.4	endif	if (filtermin>0.49)		filtermin = 0.49	endif	filterIIR/LO=(filtermax)/ORD=(order) filteredwavex	filterIIR/LO=(filtermax)/ORD=(order) filteredwavey		//DECIMATION	Resample/RATE=(decimation) filteredwavex, filteredwavey		duplicate/o filteredwavex $outwavex	duplicate/o filteredwavey $outwaveyendFunction  NIFIDfit(xwavename)	string xwavename	WAVE GeneralNIFIDParam	WAVE  NIFIDParam	variable amp	variable ShowFFT	= GeneralNIFIDParam[3]	variable ShowR	= GeneralNIFIDParam[4]	variable ShowRaw	= GeneralNIFIDParam[0]		DoWindow/k FFT_graph	DoWindow/k Rup_graph	DoWindow/k Raw_graph	If (ShowRaw==1)		 NIFIDDisplayRawGraph()	endif	If (ShowFFT==1)		 NIFIDfit_FFT(xwavename)	endif		If (ShowR==1)		 NIFIDDisplayRupGraph("Rup")	endif	if ( NIFIDParam[11]==4)		amp= NIFIDfit_sineXY(xwavename)	elseif ( NIFIDParam[11]==1)		amp=  NIFIDfitPolyR(xwavename)	elseif ( NIFIDParam[11]==2)		amp= NIFIDfitExpR(xwavename)	else				print "sine x fit"		return  NIFIDfitDecaySineX(xwavename)	endif	return ampendfunction  NIFIDfit_sineXY(xwavename)	string xwavename	string ywavename	WAVE  NIFIDparam, GeneralNIFIDParam, Xup, Yup	Wave/t StringHistory	WAVE TimeHistory, AmpHistory, FreqHistory, T2History, PhaseHistory, ErrorHistory, PDirectionHistory	variable/g NMRScannum 	variable tstep=deltax($xwavename)	variable Amp = 	 NIFIDParam[12]	variable Freq = 	 NIFIDParam[13]	variable Phase = 	 NIFIDParam[15]	variable T2 = 		 NIFIDParam[14]	variable RelPhase=  NIFIDParam[16]		ywavename = xwavename	ywavename="y"+xwavename[1,strlen(xwavename)]	duplicate/o $xwavename, xdata, tdata,  NIFIDfitX,  NIFIDfitY	redimension/S xdata, tdata,  NIFIDfitX,  NIFIDfitY	if (exists(ywavename) !=1)		print "Ywave : ",ywavename,"  does not exist"		return -1	endif	duplicate/o $ywavename, ydata	redimension/S xdata, ydata, tdata	tdata[] =tstep*p		make/o/N=(numpnts(xdata),2)  NIFIDdataxy,  NIFIDfitxy	 NIFIDdataxy[*][0]=xdata[p]	 NIFIDdataxy[*][1]=ydata[p]	SetScale/P x, 0, tstep,  NIFIDdataxy	make/o/n=4  NIFIDFitParms	 NIFIDFitParms = {Amp, freq, phase, t2}	make/o/n=2 xyphase	xyphase = {0,1}		 NIFIDfitx= NIFIDFuncxy( NIFIDFitParms,tdata,0)	 NIFIDfity= NIFIDFuncxy( NIFIDFitParms,tdata,1)	 NIFIDfitxy[][0]= NIFIDfity[p]	 NIFIDfitxy[][1]= NIFIDfity[p]	SetScale/P x, 0, tstep,  NIFIDfitx,  NIFIDfity		 NIFIDDisplayXupGraph(xwavename)	AppendtoGraph  NIFIDfitX	ModifyGraph rgb( NIFIDfitx)=(0,0,50000)	ModifyGraph mode( NIFIDfitx)=0,lstyle( NIFIDfitx)=8		 NIFIDDisplayYupGraph(ywavename)	AppendtoGraph  NIFIDfitY	ModifyGraph rgb( NIFIDfitY)=(0,0,50000)	ModifyGraph mode( NIFIDfitY)=0,lstyle( NIFIDfitY)=8	doupdate ;		sleep/s 1		Make/O/N=2 slash_ywave //Corrects error in FuncFitMD	slash_ywave[0]=0	slash_ywave[1]=1		FuncFitMD/Q  NIFIDFuncxy,  NIFIDFitParms,  NIFIDdataxy /D= NIFIDfitxy /X=tdata /Y=slash_ywave	 NIFIDfitx= NIFIDfitxy[p][0]	 NIFIDfity= NIFIDfitxy[p][1]		Amp =  NIFIDFitParms[0]	Freq =  NIFIDFitParms[1]	Phase =  NIFIDFitParms[2]	T2 =  NIFIDFitParms[3]		If (Amp<0)		Amp = -Amp		Phase = Phase + 180	endif	if (Phase < 0 )		Phase = Phase+360	endif	If (Phase > 360)		Phase = Phase - 360	endif	 	DoWindow/F xup_graph	string timetxt	sprintf timetxt "%s %s", secs2date(moddate($xwavename),0), secs2time(moddate($xwavename),2)	string graphtxt	sprintf graphtxt "%s, Amp = %.3g mV\r%s\rFreq. = %.4gHz\rP= %3.0fdeg, T2= %.3gms", xwavename, Amp*1e0,timetxt, Freq, Phase, 1e3*T2	string ParamWaveName	ParamWaveName="NIFIDParam"+xwavename[3,strlen(xwavename)]	duplicate/o $ParamWaveName, FitNIFIDParams	sprintf graphtxt "%s\rRF: %gkHz, %gms\r        %gV, B=%gV", graphtxt, FitNIFIDParams[0]*1e-3, FitNIFIDParams[1]*1e3, FitNIFIDParams[2], FitNIFIDParams[3]	TextBox /A=RB/B=0 /F=0 graphtxt	printf "\t\t%s\t(Last=%d)\tAmp = %.3g mV\tFreq. = %.3g Hz\tPhase = %4.0f deg\tT2 = %.2g ms\t%s\r", xwavename, NMRScanNum,Amp*1e0, Freq, Phase, 1e3*T2, timetxt	variable fitscannum	fitscannum =  NIFIDWaveName2Num(xwavename)	TimeHistory[fitscannum] = moddate($xwavename)	AmpHistory[fitscannum] = Amp	FreqHistory[fitscannum] = Freq	T2History[fitscannum]=T2	PhaseHistory[fitscannum]=Phase		NIFIDparam[27]=Amp	NIFIDparam[28]=Freq	NIFIDparam[29]=T2	NIFIDparam[30]=Phase	NIFIDparam[31]=NIFIDparam[16]	return ampendFunction  NIFIDFuncxy(Fitparms,tyme,xyphase)	wave FitParms	variable tyme, xyphase	WAVE   NIFIDparam	variable output	variable RelativePhase =  NIFIDParam[16]		variable Amp = FitParms[0]	variable freq = FitParms[1]	variable phase = FitParms[2]  	variable T2 = FitParms[3]	variable firstphase = 3.14159 * round(RelativePhase)		if (xyphase==0)		output=Amp*cos(2*PI*freq*tyme-phase*3.14159/180)*exp(-tyme/T2)	else		output=Amp*sin(2*PI*freq*tyme-phase*3.14159/180+firstphase)*exp(-tyme/T2)	endif	return outputendfunction TestNIFIDfitParams_sineXY(xwavename)	string xwavename	string ywavename	WAVE  NIFIDParam, Xup, Yup	variable tstep=deltax($xwavename)	variable Amp = 	 NIFIDParam[12]	variable Freq = 	 NIFIDParam[13]	variable Phase = 	 NIFIDParam[15]	variable T2 = 		 NIFIDParam[14]		ywavename = xwavename	ywavename="y"+xwavename[1,strlen(xwavename)]	duplicate/o $xwavename, xdata, tdata,  NIFIDfitX,  NIFIDfitY	redimension/S xdata, tdata,  NIFIDfitX,  NIFIDfitY	if (exists(ywavename) !=1)		print "Ywave : ",ywavename,"  does not exist"		return -1	endif	duplicate/o $ywavename, ydata	redimension/S xdata, ydata, tdata	tdata[] =tstep*p		make/o/N=(numpnts(xdata),2)  NIFIDdataxy,  NIFIDfitxy	 NIFIDdataxy[*][0]=xdata[p]	 NIFIDdataxy[*][1]=ydata[p]	SetScale/P x, 0,tstep,  NIFIDdataxy	make/o/n=4  NIFIDFitParms	 NIFIDFitParms = {Amp, freq, phase, t2}	make/o/n=2 xyphase	xyphase = {0,1}		 NIFIDfitx= NIFIDFuncxy( NIFIDFitParms,tdata,0)	 NIFIDfity= NIFIDFuncxy( NIFIDFitParms,tdata,1)	 NIFIDfitxy[][0]= NIFIDfity[p]	 NIFIDfitxy[][1]= NIFIDfity[p]	SetScale/P x, 0, tstep,  NIFIDfitx,  NIFIDfity		 NIFIDDisplayXupGraph(xwavename)	AppendtoGraph  NIFIDfitX	ModifyGraph rgb( NIFIDfitx)=(0,0,50000)	ModifyGraph mode( NIFIDfitx)=0,lstyle( NIFIDfitx)=8		 NIFIDDisplayYupGraph(ywavename)	AppendtoGraph  NIFIDfitY	ModifyGraph rgb( NIFIDfitY)=(0,0,50000)	ModifyGraph mode( NIFIDfitY)=0,lstyle( NIFIDfitY)=8	doupdate endfunction  NIFIDRemoveXupOffset()	WAVE xup, yup	wavestats/Q Xup	Xup = Xup - V_avg	wavestats/Q Yup	Yup = Yup - V_avgendFunction  NIFIDfit_FFT(xwavename)	string xwavename	WAVE W_coef	variable Cent, FFTAmp, FWHM		variable padlength = 256	do		padlength=padlength*2	while (numpnts(FFTwave)>padlength)	duplicate/o $xwavename FFTwave, FFTup	padlength = max(numpnts(FFTwave), padlength)	FFT /MAG /PAD=(padlength) /DEST=FFTmag FFTwave	duplicate/o FFTmag FFTup	DoWindow/k FFT_graph 	variable x0=30, y0=270, dx=320, dy=125	display/k=1/w=(x0, y0, x0+dx, y0+dy) fftup	ModifyGraph mode=4	DoWindow/C FFT_graph	SetAxis bottom 0,2000	duplicate/o FFTup FFTfitwave	CurveFit/Q gauss FFTup  /D=FFTfitwave	Appendtograph FFTfitwave	ModifyGraph rgb(FFTfitwave) = (0,0,65000),  lstyle(FFTfitwave)=8	Cent = W_coef[2] 									FFTAmp = W_coef[1] / W_coef[3] 	FWHM = 2*ln(2)*W_Coef[3]		string graphtxt	sprintf graphtxt, "%s\rfreq = %.3g Hz\rFWHM= %.3g Hz",xwavename, Cent,FWHM	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxt	SetAxis bottom 0,4000 	return Centendfunction  NIFIDfitExpR(xwavename)	string xwavename	string rwavename, ywavename	variable T0, useconstraints, startTexp, stopTexp,startTpoly,stopTpoly, startFFT	WAVE  NIFIDParam	WAVE/T  NIFID_fitconstraints	string graphname = xwavename + "_graph"	string graphtxt	variable y0,ExpAmp,Amp, FFTAmp,T2, fwhm,cent	variable/g NMRScannum	make/o W_coef	wave TimeHistory,AmpHistory, ErrorHistory, T2History,PhaseHistory, CentHistory	variable V_FitError = 0	variable fitscannum, UseExpFitValFlag	variable maxFFTfitrange	wave tdata		T0 =  NIFIDParam[17]	startTexp =  NIFIDParam[19]	stopTexp =  NIFIDParam[20]	startTpoly =  NIFIDParam[19]	stopTpoly =  NIFIDParam[20]	UseExpFitValFlag =  NIFIDParam[11]	startFFT =  NIFIDParam[21]	maxFFTfitrange =  NIFIDParam[22]		fitscannum =  NIFIDWaveName2Num(xwavename)	rwavename = "Rup" + num2str(fitscannum)	ywavename = "yup" + num2str(fitscannum)	if(fitscannum == -1)		fitscannum = NMRScannum		rwavename = "Rup"		ywavename = "yup"	endif	// Exponential Fit	duplicate/o $rwavename rfitwave	duplicate/o rfitwave  mask	duplicate/o rfitwave   NIFIDexpFitwave		K0=0		K1= NIFIDParam[12]		K2= NIFIDParam[13]	curvefit/Q /G exp, rfitwave/D =  NIFIDexpFitwave	wavestats/Q  NIFIDexpFitwave				// to find V_npnts		 NIFIDexpFitwave[0,x2pnt($rwavename,startTexp)]=NaN	 NIFIDexpFitwave[x2pnt($rwavename,stopTexp),V_npnts]=NaN	ExpAmp = W_coef[0]+W_coef[1]*exp(-W_coef[2]*t0);			 T2 = 1/W_coef[2]	//PRINT RESULTS	DoWindow/k $graphname	if(char2num(xwavename[0]) == char2num("x"))		display/k=1/w=(30+1,20+1,30+350,20+250) $xwavename	else		display/k=1/w=(400+1,20+1,400+350,20+250) $xwavename	endif	DoWindow/C $graphname	appendtograph $rwavename	ModifyGraph rgb($rwavename) = (0,65000,0)	appendtograph  NIFIDexpFitwave		ModifyGraph rgb( NIFIDexpFitwave)=(0,0,65535), lstyle( NIFIDexpFitwave)=8	Label left "\\Z14NMR Signal (mV)"	Label bottom "\\Z14Time (S)"	sprintf graphtxt, "NIFID: %g A(Exp) = %.3g mV\rTau = %.3g ms\r"+ NIFIDtimestring(xwavename),fitscannum,ExpAmp, T2*1000	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxt	Amp = ExpAmp			TimeHistory[fitscannum] = moddate($xwavename)	AmpHistory[fitscannum] = Amp	T2History[fitscannum]=T2	PhaseHistory[fitscannum]=0	return ampEndfunction  NIFIDfitPolyR(xwavename)	string xwavename	string rwavename, ywavename	variable T0, useconstraints, startTexp, stopTexp,startTpoly,stopTpoly, startFFT	WAVE  NIFIDParam	WAVE/T  NIFID_fitconstraints	string graphname = xwavename + "_graph"	string graphtxt	variable y0,Polyamp,Amp, FFTAmp,T2, fwhm,cent	variable/g NMRScannum	make/o W_coef	wave TimeHistory,AmpHistory, ErrorHistory, T2History,PhaseHistory, CentHistory	variable V_FitError = 0	variable fitscannum, UseExpFitValFlag	variable maxFFTfitrange	wave tdata		T0 =  NIFIDParam[17]	startTexp =  NIFIDParam[19]	stopTexp =  NIFIDParam[20]	startTpoly =  NIFIDParam[19]	stopTpoly =  NIFIDParam[20]	UseExpFitValFlag =  NIFIDParam[11]	startFFT =  NIFIDParam[21]	maxFFTfitrange =  NIFIDParam[22]		fitscannum =  NIFIDWaveName2Num(xwavename)	rwavename = "Rup" + num2str(fitscannum)	ywavename = "yup" + num2str(fitscannum)	if(fitscannum == -1)		fitscannum = NMRScannum		rwavename = "Rup"		ywavename = "yup"	endif// Polynomial Fit	duplicate/o $rwavename rfitwave,   NIFIDpolyFitwave		K0=919		K1=-1.5e4		K2=1e5		curvefit/Q /G poly 3, rfitwave/D =  NIFIDpolyFitwave  //To increase the order of the polynomial, change 											//the number next to 'poly' to n+1 of the desired order, and											//add guesses for the corresponding K's. Don't forget to print.		PolyAmp = poly(W_coef, t0)		//PRINT RESULTS	DoWindow/k $graphname	if(char2num(xwavename[0]) == char2num("x"))		display/k=1/w=(30+1,20+1,30+350,20+250) $xwavename	else		display/k=1/w=(400+1,20+1,400+350,20+250) $xwavename	endif	DoWindow/C $graphname	appendtograph $rwavename	ModifyGraph rgb($rwavename) = (0,65000,0)	appendtograph  NIFIDpolyFitwave		ModifyGraph rgb( NIFIDpolyFitwave)=(0,0,0), lstyle( NIFIDpolyFitwave)=8	Label left "\\Z14NMR Signal (mV)"	Label bottom "\\Z14Time (S)"	sprintf graphtxt, "NIFID: %g \tA(Poly)= %.3g mV\rK0 = %.3g \tK1= %.3g \rK2 = %.3g \r"+ NIFIDtimestring(xwavename),fitscannum,PolyAmp,W_coef[0],W_coef[1],W_coef[2]	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxt		Amp = PolyAmp				TimeHistory[fitscannum] = moddate($xwavename)	AmpHistory[fitscannum] = Amp	T2History[fitscannum]=T2	PhaseHistory[fitscannum]=0	return amp	Endfunction  NIFIDfitDecaySineX(xwavename)	string xwavename	string rwavename, ywavename	variable T0, startTexp, stopTexp,startTpoly,stopTpoly, startFFT	WAVE  NIFIDParam	WAVE/T  NIFID_fitconstraints	string graphname = xwavename + "_graph"	//string graphtxt	//variable y0,Amp, FFTAmp,T2, fwhm,cent	variable/g NMRScannum	make/o W_coef	wave TimeHistory,AmpHistory, ErrorHistory, T2History,PhaseHistory, CentHistory, FreqHistory	variable V_FitError = 0	variable fitscannum, UseExpFitValFlag	variable maxFFTfitrange	wave tdata		fitscannum =  NIFIDWaveName2Num(xwavename)//Decaying Sine	NIFIDDisplayXupGraph(xwavename)	AppendtoGraph  NIFIDsinFit	ModifyGraph rgb( NIFIDsinFit)=(0,0,50000)	ModifyGraph mode( NIFIDsinFit)=0,lstyle( NIFIDsinFit)=8	if (1==1)		duplicate/o $xwavename  NIFIDsinFitwave, NIFIDsinFit	//	duplicate/o  NIFIDsinFitwave mask		CurveFit/NTHR=0 line  NIFIDisnFit /D 		duplicate/o  NIFIDsinFitwave  NIFIDsinFit		make/o/n=6 coefwave		coefwave[0]= NIFIDParam[12]		//Amp		coefwave[1]= NIFIDParam[14]		//T2		coefwave[2] =NIFIDParam[13]		//freq		coefwave[3]= NIFIDParam[15]		//phase		coefwave[4]= 0 //W_coef[0]	//y0		coefwave[5]= 0 //W_coef[1]	//slope		print coefwave[0], coefwave[1], coefwave[2], coefwave[3], coefwave[4], coefwave[5]	//	FuncFit  NIFIDexpsine, coefwave, NIFIDsinFitwave /D=NIFIDsinFit /X=tdata		//changed????		FuncFit  NIFIDexpsine, coefwave, NIFIDsinFitwave /D=NIFIDsinFit 		//changed????		print coefwave[0], coefwave[1], coefwave[2], coefwave[3], coefwave[4],coefwave[5]		wavestats/Q  NIFIDsinFitwave				// to find V_npnts		//	 NIFIDsinFitwave[0,x2pnt( NIFIDsinFitwave,startTexp)]=NaN	//	 NIFIDsinFitwave[x2pnt( NIFIDsinFitwave,stopTexp),V_npnts]=NaN		variable Amp, T2, Freq, Phase		Amp = coefwave[0];	 T2 = coefwave[1];		Freq = coefwave[2]; Phase = coefwave[3]	endif	//PRINT RESULTS		NIFIDDisplayXupGraph(xwavename)	AppendtoGraph  NIFIDsinFit	ModifyGraph rgb( NIFIDsinFit)=(0,0,50000)	ModifyGraph mode( NIFIDsinFit)=0,lstyle( NIFIDsinFit)=8		DoWindow/F xup_graph	string timetxt	sprintf timetxt "%s %s", secs2date(moddate($xwavename),0), secs2time(moddate($xwavename),2)	string graphtxt	sprintf graphtxt "%s, Amp = %.3g mV\r%s\rFreq. = %.4gHz\rP= %3.0fdeg, T2= %.2gms", xwavename, Amp*1e0,timetxt, Freq, Phase, 1e3*T2	string ParamWaveName	ParamWaveName="NIFIDParam"+xwavename[3,strlen(xwavename)]	duplicate/o $ParamWaveName, FitNIFIDParams	sprintf graphtxt "%s\rRF: %gkHz, %gms\r        %gV, B=%gV", graphtxt, FitNIFIDParams[0]*1e-3, FitNIFIDParams[1]*1e3, FitNIFIDParams[2], FitNIFIDParams[3]	TextBox /A=RT /F=0 graphtxt	printf "\t\t%s\t(Last=%d)\tAmp = %.3g mV\tFreq. = %.3g Hz\tPhase = %3.0f deg\tT2 = %.2g ms\t%s\r", xwavename, NMRScanNum,Amp*1e0, Freq, Phase, 1e3*T2, timetxt	fitscannum =  NIFIDWaveName2Num(xwavename)	TimeHistory[fitscannum] = moddate($xwavename)	AmpHistory[fitscannum] = Amp	FreqHistory[fitscannum] = Freq	T2History[fitscannum]=T2	PhaseHistory[fitscannum]=Phase		NIFIDparam[27]=Amp	NIFIDparam[28]=Freq	NIFIDparam[29]=T2	NIFIDparam[30]=Phase//	sprintf graphtxt, "NIFID:%g \tA(Sin) = %.3g mV\rTau = %.3g ms\rSine Freq.= %.3g Hz\tSinPhase= %.0f\r"+ NIFIDtimestring(xwavename),fitscannum,sinAmp, sinT2*1000,sinFreq,sinphase//	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxt	return ampEndFunction  NIFIDexpsine(w,t) : FitFunc	Wave w	Variable t	variable value	//CurveFitDialog/ These comments were created by the Curve Fitting dialog. Altering them will	//CurveFitDialog/ make the function less convenient to work with in the Curve Fitting dialog.	//CurveFitDialog/ Equation:	//CurveFitDialog/ f(t) = Amp*exp(-1*t/tau)*sin(6.28*freq*t+phase)	//CurveFitDialog/ End of Equation	//CurveFitDialog/ Independent Variables 1	//CurveFitDialog/ t	//CurveFitDialog/ Coefficients 4	//CurveFitDialog/ w[0] = Amp	//CurveFitDialog/ w[1] = tau	//CurveFitDialog/ w[2] = freq	//CurveFitDialog/ w[3] = phase	value = w[0]*exp(-1*t/w[1])*cos(6.28*w[2]*t+(3.14159/180)*w[3]) +w[4] + w[5]*t	if (value == NaN)		print t, w[0], w[1], w[2], w[3], w[4],w[5]	endif	return valueEnd// ================================== Multiple Sweep Functions ================================function  NIFIDLoss(numsweep)	variable numsweep 	WAVE GeneralNIFIDParam, NIFIDParam	WAVE/T StringHistory	variable i = 0	variable starttime, maxsignal	variable/g NMRScannum	//wave/t StringHistory	string appendtoHist	variable V_FitError	variable startwv, endwv	variable sleeptime = 3		startwv =GeneralNIFIDParam[12]		//NOTE: change in loop	endwv =GeneralNIFIDParam[13]		//NOTE:  change in loop		do		 NIFID()		StringHistory[NMRScannum] = StringHistory[NMRScannum] + "; NMRLoss"		if(i == 0)			startwv = NMRScannum			GeneralNIFIDParam[12]=NMRScannum			StringHistory[NMRScannum] = StringHistory[NMRScannum] + "; First Sweep"		endif		endwv=NMRScannum		GeneralNIFIDParam[13]=NMRScannum		i+=1		sleep/s sleeptime	while  (i < numsweep )		 NIFIDLossFit(startwv, endwv)	//NMRLossTable()	printf "Pulse Length: %g s, RF amp: %gV, Frequency: %g Hz\r",  NIFIDParam[1], NIFIDParam[2], NIFIDParam[0]Endfunction  NIFIDLossFit(startwv,stopwv)	variable startwv, stopwv	WAVE/T  GeneralNIFIDParamStrings	WAVE W_coef, W_sigma	variable i = startwv	variable Loss, LossErr	string graphtxt	variable V_FitError	string curwvnm	string graphname	variable amp, err, field, fwhm, noise, noiseabs	make/o/N = (stopwv-startwv+1), NMRLBscannum, NMRLBampwv,  NMRLBfitWv, NMRLBamperrwv	make/o/d/N = (stopwv-startwv+1),  NMRLBtimewv	make/o/N = 4 w_sigma	NMRLBampwv=NaN	variable ignore=0, ignorenum=1, ignorelen=0	make/o IgnoreList		IgnoreList =  NIFIDString2List(GeneralNIFIDParamStrings[10])	redimension/n=(IgnoreList[0]) ignorelist		variable loopCountIgnore = i, wavesSkipped = 0		if (startwv < stopwv)		do			sprintf curwvnm, "xup%g", i			do			if (IgnoreList[ignorenum]==i)				ignore = 1			endif			ignorenum +=1			while (ignorenum < ignorelist[0])		if (ignore != 1)			amp = NIFIDfit(curwvnm)			err = 0				sprintf  graphname, curwvnm +"_graph"			DoWindow/k $graphname			sleep/s 1		//To see fit display		else			amp = NaN			err = NaN			wavesSkipped+=1		endif		NMRLBscannum[i-startwv] = i		NMRLBampwv[i-startwv]= amp		 NMRLBtimewv[i-startwv]= numbykey("MODTIME",waveinfo($curwvnm,0))		NMRLBamperrwv[i-startwv] = err					 //Error in Amplitude of peak		i += 1		ignore = 0		ignorenum = 1		while(i <= stopwv)	else		Print "Error in NMRLossFit:  start wave num >= stop wave num"	endif		DoWindow/k NMRLoss_graph	display/k=1/w=(750+1,350+1,750+250,350+150) NMRLBampwv	ModifyGraph mode(NMRLBampwv)=3, msize(NMRLBampwv)=4	DoWindow/C NMRLoss_graph	V_FitError = 0	duplicate/o NMRLBampwv residwv	curvefit/q line, NMRLBampwv/d=NMRLBfitWv /R=residwv	AppendtoGraph NMRLBfitWv	ModifyGraph rgb(NMRLBfitWv)=(0,0,65535)	ModifyGraph lstyle(NMRLBfitWv)=8	Loss = -1*W_coef[1]*100/NMRLBfitWv[0]	LossErr = W_sigma[1]*100/NMRLBfitWv[0]	print W_sigma[1], NMRLBfitWv[0]			// noise	wavestats/Q residwv	noise=100*V_sdev/NMRLBfitwv[0]	noiseabs = V_sdev		printf "NMR Loss:    %.2g \r",  Loss	Label left "NMR Signal (mV)"	Label bottom "sweep number"	sprintf graphtxt, "NMR Loss: %.2g (+-%.2g)%% \rScans %g - %g\rnoise %.2gmV = %.2g%%\r", Loss,LossErr,startwv,stopwv,noiseabs, noise	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxt +  NIFIDtimestring(curwvnm)Endmacro  NIFIDLossTable()		DoWindow/k NMRLoss_table		Edit/k=1/w=(650,450,1050,600) NMRLBscannum, NMRLBtimewv, NMRLBampwv, NMRLBamperrwv		DoWindow/c NMRLoss_table		ModifyTable width(NMRLBscannum)=20,title(NMRLBscannum)="ScanNum"		ModifyTable width(Point)=20, width(NMRLBtimewv)=100, width(NMRLBampwv)=50, width(NMRLBamperrwv)=50		ModifyTable  format(NMRLBampwv)=0, format(NMRLBamperrwv)=0		ModifyTable format(NMRLBtimewv)=8,digits(NMRLBtimewv)=4,sigDigits(NMRLBampwv)=3; 		ModifyTable sigDigits(NMRLBamperrwv)=3; 		ModifyTable title(NMRLBtimewv)="Time",title(NMRLBampwv)="Amp(mv)"; 		ModifyTable title(NMRLBamperrwv)="AmpErr(mV)"		DoUpdateEndmacro  NIFIDSpindown(waitinterval)	variable waitinterval   	//hours	variable/g NMRScannum, startwv, endwv	variable t0	variable numsweeps = 0	startwv = GeneralNIFIDParam[8]		//NOTE: used in the loop	endwv =  GeneralNIFIDParam[9]		//NOTE: used in the loop		sleep/S/B/C=2 GeneralNIFIDParam[5]*3600		 NIFID()	startwv = NMRScannum	GeneralNIFIDParam[8] = NMRScannum	endwv=NMRScannum	GeneralNIFIDParam[9]=NMRScannum	StringHistory[NMRScannum] = StringHistory[NMRScannum] + "; Spin Down; First Sweep"	numsweeps =  numsweeps+1	do		t0 = ticks		sleep/B/C=2/s waitinterval*3600		 NIFID()		endwv = NMRScannum		GeneralNIFIDParam[9]=NMRScannum		StringHistory[NMRScannum] = StringHistory[NMRScannum] + "; Spin Down"		numsweeps +=1		if (1==1)						//User Click breaks out of loop and ends SpinDown...otherwise need to abort			if((ticks-t0)/60 < waitinterval*3600)				break			endif		endif	while(1)Endmacro   NIFIDSpindownFit(Startnum,Stopnum,NMRloss)	variable startnum, stopnum,NMRLoss	variable i 	variable V_FitError	variable t0, tau, tauerr, y0,A	variable amp	string curwvnm	string graphname	make/O/N = (stopnum-startnum+1) BSDindex, BSDamp,BSDampCor,BSDfit	make/O/d/N = (stopnum-startnum+1)  BSDtime		dowindow/k SDtable	edit/k=1  BSDindex, BSDtime, BSDamp,BSDampCor,BSDfit	dowindow/c SDtable		sprintf curwvnm, "xup%g",startnum	t0=moddate($curwvnm)	i=startnum		variable ignore=0, ignorenum=1, ignorelen=0	make/o IgnoreList	IgnoreList =  NIFIDString2List(GeneralNIFIDParamStrings[10])	redimension/n=(IgnoreList[0]) ignorelist	variable loopCountIgnore = i, wavesSkipped = 0			do			sprintf curwvnm, "xup%g", i			do			if (IgnoreList[ignorenum]==i)				ignore = 1			endif			ignorenum +=1		while (ignorenum < ignorelist[0])		if (ignore != 1)			sprintf curwvnm, "xup%g", i			sprintf graphname, curwvnm + "_graph"			amp= NIFIDfit(curwvnm)			DoWindow/k $graphname			sleep/s 1	//to see fit		else			amp=NaN			wavesSkipped+=1		endif		BSDindex[i-startnum] = i		BSDamp[i-startnum] = amp		BSDampCor[i-startnum] = BSDamp[i-startnum] * (1+NMRloss)^(i-startnum)		BSDtime[i-startnum]=  (moddate($curwvnm) - t0)/3600		i += 1		ignore = 0		ignorenum = 1	while(i <= stopnum)//	redimension/N=(stopnum-startnum-wavesSkipped) BSDindex, BSDtime, BSDamp,BSDampCor,BSDfit	//fit to exponential	DoWindow/k Spindown	display/k=1/w=(750+1,250+1,750+250,250+150) BSDampCor vs BSDtime	DoWindow/C Spindown	V_FitError = 0	K0=0						// offset signal	//curvefit/q  exp, BSDampCor /X=BSDtime /d = BSDfit	curvefit/q /H="100"  exp, BSDampCor /X=BSDtime /d = BSDfit	tau = 1/W_coef[2];		y0=W_coef[0];		 A=W_coef[1]	tauerr= W_sigma[2]/(W_coef[2]^2)		make/o BSDfitdisplay	setscale x BSDtime[0],BSDtime[i-startnum] +0.1*(BSDtime[i-startnum] -  BSDtime[0]), "hrs", BSDfitdisplay	BSDfitdisplay = W_coef[0]+W_coef[1]*exp(-W_coef[2]*x)		AppendtoGraph BSDfitdisplay	ModifyGraph rgb(BSDfitdisplay) = (0,0,65535)	ModifyGraph lstyle(BSDFitdisplay) = 8	ModifyGraph mode(BSDampCor) = 3		Label left "\\Z14Corrected NMR Signal (mV)"	Label bottom "\\Z14Time (hrs)"	string graphtxt	sprintf graphtxt, "Spin Down Fit: %s\rtau = %.1f  +- %.1f hrs\rNMR Loss Used = %.4g", secs2date(moddate($curwvnm),0),tau,tauerr, NMRloss	sprintf graphtxt, "%s\rY = %g + %.1fgexp(-%.2g t)",graphtxt, y0,A,1/tau	Textbox/N=ampbx/F=0/B=1/Y=0.00/X=0.00 graphtxtEndmacro  NIFIDPumpRate(twaithrs)	variable  twaithrs	variable n=0,nmax, t0	variable/g NMRScannum	variable FirstScanNum = GeneralNIFIDParam[18]		//NOTE:  This is set in the loop	variable LastScanNum = GeneralNIFIDParam[19]		//NOTE:  This is set in the loop		//wave/t StringHistory	variable startwv, endwv 		make/o	rateamp, ratetime	rateamp=0;		ratetime=0;	DoWindow/k rate_graph	display/k=1/w=(650+1,250+1,650+250,250+150) rateamp vs ratetime	ModifyGraph mode=3	DoWindow/C Rate_graph	label bottom "hrs"	 NIFID()	StringHistory[NMRScannum] = StringHistory[NMRScannum] + ";  NIFID Pump Rate; First Sweep"	GeneralNIFIDParam[18]=NMRScannum	startwv=NMRScannum	t0= numbykey("MODTIME",waveinfo(xup,0))/3600	ratetime[0]=0	 NIFIDRemoveXupOffset()		//Cludge	rateamp[0]= NIFIDfit("xup")		do		sleep/s/b/c=2 twaithrs*3600		n=n+1		 NIFID()		StringHistory[NMRScannum] = StringHistory[NMRScannum] + "; Pump Rate"		GeneralNIFIDParam[19]=NMRScannum		endwv=NMRScannum		ratetime[n]= numbykey("MODTIME",waveinfo(xup,0))/3600  -t0		rateamp[n]= NIFIDfit("xup")		doupdate	while (1)	 NIFIDratefit(startwv, endwv)Endmacro  NIFIDRateFit(startwv, endwv)	Variable startwv, endwv			variable n=0, t0	string curwvnm, graphname		make/o/n=(endwv-startwv+1) rateamp,  raten	make/o/d/n=(endwv-startwv+1)  ratetime		sprintf curwvnm, "xup%g", startwv	t0= numbykey("MODTIME",waveinfo($curwvnm,0)) /3600	variable ignore=0, ignorenum=1, ignorelen=0	make/o IgnoreList		IgnoreList =  NIFIDString2List(GeneralNIFIDParamStrings[10])	redimension/n=(IgnoreList[0]) ignorelist		variable loopCountIgnore = n, wavesSkipped = 0		do			do				if (IgnoreList[ignorenum]==n+startwv)					ignore = 1				endif				ignorenum +=1			while (ignorenum < ignorelist[0])			if (ignore != 1)				sprintf curwvnm, "xup%g", startwv+n				rateamp[n] =  NIFIDfit(curwvnm)				ratetime[n]= numbykey("MODTIME",waveinfo($curwvnm,0))/3600  - t0				raten[n]=n				sleep/s 1				//To see fit				graphname = curwvnm + "_graph"				doWindow/k $graphname			else				rateamp[n] = NaN				ratetime[n] = NaN				raten[n] = NaN				wavesSkipped+=1			endif			n += 1			ignore = 0			ignorenum = 1		while (n<= endwv-startwv)		DoWindow/k rate_graph	display/k=1/w=(750+1,375+1,750+250,375+150) rateamp vs ratetime	ModifyGraph mode=3	DoWindow/C Rate_graph	label bottom "hrs"	variable optpumprate	string graphtxt	duplicate/o rateamp pumprate_fit	CurveFit/q line rateamp /x=ratetime/D=pumprate_fit	optpumprate=W_coef[1]	if (1==1)		//Fit to an exponential pump up		duplicate/o rateamp pumprate_fit_exp		variable optpumprateexp, Vmax, tau		CurveFit/q exp rateamp /x=ratetime/D=pumprate_fit_exp		optpumprateexp=-W_coef[1]*W_coef[2]		Vmax=W_coef[0]		tau=1/W_coef[2]		printf "exp: rate=%.3g\tmV/hr\tVmax=%.3g mV\ttau=%.3g hrs\r", optpumprateexp,Vmax,tau		sprintf graphtxt "EXP: Vmax %.3g mV\rtau %.3g hrs\rExpRate %.3g mV/hr\r" , Vmax, tau, optpumprateexp		Textbox/N=ampbxexp/F=0/Y=65.00/X=0.00 graphtxt		TextBox/C/N=ampbxexp/B=1		AppendtoGraph pumprate_fit_exp vs ratetime		ModifyGraph rgb(pumprate_fit_exp)=(0,65535,0)		ModifyGraph lstyle(pumprate_fit_exp)=8	endif	AppendtoGraph pumprate_fit vs ratetime	ModifyGraph rgb(pumprate_fit)=(0,0,65535)	ModifyGraph lstyle(pumprate_fit)=8	Label left "NMR Signal (mV)"	Label bottom "time (hrs)"	sprintf graphtxt "LINrate %.3g mV/hr\r%s\r" , optpumprate, NIFIDtimestring("rateamp")	Textbox/N=ampbx/F=0/A=LT graphtxt	TextBox/C/N=ampbx/B=1		 NIFIDRateTable()endmacro  NIFIDRateTable()		DoWindow/k PumpRate_table		Edit/k=1/w=(650,450,950,700) ratetime, rateamp		DoWindow/c PumpRate_tableEnd//=============================  Q  ===========================function NIQ(Fstart, Fstop, Fstep)	variable Fstart, Fstop, Fstep	//connect coil on switch box to a loop of wire (the resistor in the box will protect the output of the NI board)	//connect the coil and tuning capacitor to the NI input	variable AOtimestep = 2.5e-6	//For analog output pulse.  	variable RFamp=0.2	variable Freq	variable npnts=300	make/o/n=(npnts) RFwave		make/o/N=(abs(Fstop-Fstart)/Fstep) Qscan=0	setscale/P x, Fstart, Fstep, Qscan		 NIFIDSetDigitalIO(0,1); sleep/s 0.1			//Set a relay for the pickup coil if necessary		variable xo=450, yo=350, dx=350, dy=150	DoWindow/K QscanGraph	Display/k=1/W=(xo, yo, xo+dx, yo+dy) Qscan	DoWindow/C QscanGraph	ModifyGraph mode(Qscan)=3		variable i	For (i=0;i<=abs(Fstop-Fstart)/Fstep; i=i+1)		Freq = Fstart + i*Fstep		//set up RF output wave (RFwave) and input wave (DAQXup)		fDAQmx_WaveformStop("DEV1")		setscale/p x, 0, AOtimestep, "sec", RFwave		RFwave = RFamp*sin(2*3.14159*Freq*x)					duplicate/o RFwave DAQXup					//Generate RF output.  Note:  this waits for the AI start trigger, OutChannel = 1, Vmax= -Vmin=10		DAQmx_WaveformGen /DEV="DEV1" /NPRD=1 /STRT /TRIG={"/Dev1/Ai/starttrigger"} "RFWave, 1, -10, 10"		// Start reading input.  Also triggers output		DAQmx_scan/dev="Dev1"/ave=1   WAVES="DAQXup, 3/Diff, -1, 1"				// Lockin and Filter to get magnetude		duplicate/o DAQXup, Qx, Qy		Qx=DAQXup *sin(2*3.14159*freq*x)			Qy=DAQXup *cos(2*3.14159*freq*x)			variable LowPassFreq = 5000		variable deltafreq = 1/deltax(Qx)		variable filtermin=(freq-LowPassFreq)/deltafreq		variable filtermax=(LowPassFreq)/deltafreq		filterIIR/LO=(filtermax)/ORD=(4) Qx		filterIIR/LO=(filtermax)/ORD=(4) Qy				Qscan[i] =sqrt (  (sum(Qx)/npnts)^2  + (sum(Qy)/npnts)^2  )			//take averages of Qx and Qy		DoUpdate		//print Freq, Qscan[i]		//sleep/s 0.1	endfor			NIFIDSetDigitalIO(0,0);				//Set a relay for the pickup coil if necessary		WAVE W_coef	CurveFit/q/M=2/W=0 lor, Qscan/D	string txtstr	variable f0, fwhm, Q	f0=W_coef[2]; fwhm=2*sqrt(W_coef[3])	Q=f0/fwhm	sprintf txtstr, "F0= %.3gKHz \rFWHM= %.2gKHz\rQ=%.2g", 1e-3*f0, 1e-3*fwhm, Q	TextBox/C/N=text0/F=0/B=1/A=LT txtstr	ModifyGraph rgb(fit_Qscan)=(0,0,0)endfunciton Qpanel()// ==================== PROGRAM UTILITIES=================================================function/s  NIFIDtimestring(wavename)	string wavename	string returnstring	sprintf returnstring "%s,\t%s",secs2date(moddate($wavename),0), secs2time(moddate($wavename),2)	return returnstring	// return  Secs2Time(numbykey("MODTIME",waveinfo($wavename,0)),1)[0,4]+ ", " + Secs2Date(numbykey("MODTIME",waveinfo($wavename,0)),0)	//return secs2time(datetime,0) +" "  + secs2date(datetime,0) + "\r"endmacro  NIFIDNMRhistory_table()	variable/g NMRScannum	DoWindow/k  NIFIDNMRHistory_table	edit/k=1/W=(20,300,20+575,300+200) TimeHistory,AmpHistory,StringHistory,PDirectionHistory,ErrorHistory,FreqHistory, PhaseHistory,T2History	ModifyTable width(Point)=25	ModifyTable width(TimeHistory)=120, format(TimeHistory)=8	ModifyTable alignment(StringHistory)=0,width(StringHistory)=150	ModifyTable width(PDirectionHistory) = 20	ModifyTable width(AmpHistory)=50, sigDigits(AmpHistory)=3	ModifyTable width(ErrorHistory)=30	ModifyTable width(FreqHistory)=40, SigDigits(FreqHistory)=3,format(FreqHistory)=0	ModifyTable width(PhaseHistory)=60, SigDigits(PhaseHistory)=3,format(PhaseHistory)=0	ModifyTable width(T2History)=40, SigDigits(T2History)=3,format(T2History)=0	DoWindow/C  NIFIDNMRHistory_table	ModifyTable topLeftCell=(NMRScanNum-7,0)end//===================NIDAQ Utilities==================function  NIFID_NIDAQinit()		//Sets up the wave DIOtasknumbers[] to keep DIO task numbers in	variable chan	variable portnum=1	variable chanmax=2			//initialize channels 0 to chanmax	string device	WAVE DIOinfo		//First 8 are task numbers, 10-18 are current values	variable i	for (chan=0;chan<=chanmax;chan=chan+1)		sprintf device "/Dev1/port%d/line%d",portnum, chan		fDAQmx_DIO_finished(device,DIOinfo[chan+10])		//make sure that the channel is clear		DAQmx_DIO_Config/DEV="DEV1"/DIR=1/LGRP=1  device	// DIR=0 for input, LGRP=1 for using individual channels separately		DIOinfo[chan+10]= V_DAQmx_DIO_TaskNumber	endforendfunction  NIFIDSetDigitalIO(chan, value)	// Note: the channel must be initialized in NIDAQ_DIOinit() first	variable chan, value	variable portnum=1	variable returnvalue	WAVE DIOinfo	string device, cmd	sprintf device "/Dev1/port%d/line%d",portnum,chan	if (DIOinfo[chan+10] == 0)		printf "ERROR: DIO Channel %d not initialized in NIDAQ_DIOinit()\r", chan		return 1	endif	DIOinfo[chan]=value	returnvalue= fDAQmx_DIO_write(device, DIOinfo[chan+10],value)	if (returnvalue != 0)		print " fDAQmx_DIO_write(", device, ", ",DIOinfo[chan+10],",", value, ")		returns the value ",returnvalue	endif	return returnvalueendfunction  NIFIDGetDigitalIO(Chan)	variable Chan	WAVE DIOinfo	return DIOinfo[chan]Endfunction  NIFIDSetField(Bfield)	variable Bfield	variable chan=0	string cmd	WAVE NIFIDParam, GeneralNIFIDParam	variable AOut0 = NIFIDParam[32]		//AOut0 = 0 if AO_0 controls the field.  =1 if AO_0 is used for AFPF	if (AOut0 == 0)		sprintf cmd "%f, %d;", Bfield, chan		fDAQmx_WaveformStop("DEV1")		daqmx_AO_setoutputs /DEV="Dev1"  cmd		// Voltage, channel [0,1]		WAVE GeneralNIFIDParam		GeneralNIFIDParam[2]=Bfield		sleep/s 0.25	else		GeneralNIFIDParam[2]=NaN	endifEndfunction  NIFIDDAQError()	print fDAQmx_ErrorString()endfunction  NIFIDDAQreset()	fDAQmx_ResetDevice("Dev1")end//=======================General GPIB Functionsmacro  NIFIDafpGPIBinit()	string cmdstr	variable/g LockIn_device	variable/g  NIFIDFuncGenDrive_device	variable/g FuncGenAFP_device		//NOTE:  Don't Use Dev1 (this is the daq board)	// GPIB Board	variable/g GPIBboardDescriptor	NI4882 ibfind={"gpib0"}; GPIBboardDescriptor = V_flag	GPIB2 board=GPIBboardDescriptor		// FUNCTION GENERATOR SETUP: AFP	GPIB2 board=GPIBboardDescriptor	NI488 ibfind ("dev"+GeneralNIFIDParamStrings[9]), FuncGenAFP_device		//AFP function generator//	if (FuncGenAFP_device == HP3325Aoffset)//		Print "HP3325A not tested"//	endif	//NIDAQ find device		//use  "print   fDAQmx_devicenames()" to determine DAQ board name.  default = "dev1"Endfunction  NIFIDReadGPIB(theDevice, RequestCommand)	// Error if replies stack up, only takes the first in the stack	variable theDevice;	string RequestCommand	string command;	string/g GPIBin	variable/g V_flag	sprintf command "GPIB device %d", theDevice ; Execute command;	Execute "GPIB deviceclear";	sprintf command "GPIBwrite \"%s\" ",RequestCommand ;	Execute command;	sprintf command "GPIBRead/T=\"\\n\" GPIBin";	//Note:  look for "\n" to end transmission	Execute command;	Execute "GPIB gotolocal"	// Extract the proper response:  Leave the actual response in GPIBin for future reference	// Note:  HPFREQ SYNTH HAS LEADING ALPHA   "."==46, "-"==45,  " "==32, "E"==69, "e"==101	string replystr, tempstr=""	variable replynum	replystr = GPIBin 	variable n=0, i=0	do		if (numtype(str2num(replystr[n]))==0 )			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==46) %| (char2num(replystr[n])==45) )			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==32) %|(char2num(replystr[n])==101))			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==69)  )			tempstr[i]=replystr[n]; i=i+1		endif		n=n+1	while (n<strlen(replystr))	replystr = tempstr	//END of Alpha removal		replynum=str2num(replystr)	return(replynum);Endfunction  NIFIDWriteGPIB(theDevice, WriteCommand)	variable theDevice	string WriteCommand	string command	GPIB2 device=theDevice	GPIB2 deviceclear	GPIBwrite2 Writecommand	GPIB2 gotolocalEnd// ========================================AFP Sweeps ===========================================//Function  NIFIDFlipBRamp(Vstart,Vend,VSweepRate)	variable Vstart, Vend, VSweepRate	variable Vstep, Tstep	Tstep=1e-4	Vstep = VSweepRate * Tstep //Changes Vstep so that Vstep and Tstep are on the Tstep scale	variable Nstep = abs(Vstart - Vend) / Vstep	variable voltage	Make/o/n=(Nstep) VoltageOut	SetScale/P x, 0,Tstep, "s", VoltageOut  //Sets the wave time scale as .002	variable i=0	string Wavformparam = "VoltageOut, 0;"  	//The number following the wavename is the output channel.	//The number following the wavename is the input channel.  The Sample Interval prevents a phase offset between the two waves.	string Scanwaveupparam = "Xup, 0; Yup, 1:SampleInterval=0.000001"	string Scanwavedownparam = "Xdown, 0; Ydown, 1:SampleInterval=0.000001"	if(Vstart < Vend)					//Make Voltage Out Wave for UP		Make/o/n=(Nstep) Xup, Yup		SetScale/P x, 0,Tstep, "s", Xup, Yup		voltage = Vstart		do			VoltageOut[i]  = voltage			voltage += Vstep			i += 1		while(i < Nstep)//		DAQmx_WaveformGen/DEV="dev1"/NPRD=1 "VoltageOut, 0;"// see GPIBinit for dev name, NPRD=num of repeats	elseif(Vstart > Vend)				//Make Voltage Out Wave for DOWN		Make/o/n=(Nstep) Xdown, Ydown		SetScale/P x, 0,.002, "s",Xdown, Ydown		voltage = Vstart		do			VoltageOut[i]  = voltage			voltage -= Vstep			i += 1		while(i < Nstep)	else	endif		DAQmx_WaveformGen/DEV="dev1"/NPRD=1/STRT "VoltageOut, 0;"  // see GPIBinit for dev name, NPRD=num of repeats, TRIG set to triger for readEndFunction  NIFIDafpWrFuncGen_ampl(FGtype,val)	variable FGtype, val	variable/g FuncGenAFP_device	variable/g SRS345offset		// Hamilton/NIST/Michigan SRSs	variable/g HP3325Aoffset	 	// NIST HPs	string command		sprintf command, "AMPL %5.3fVp",val				//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)	//if using SRS345offset//		sprintf command, "AM %5.3fVO",val				//if using HP3325Aoffset//		 NIFIDWriteGPIB(FuncGenAFP_device,command)	//if using HP3325AoffsetendFunction  NIFIDafpWrFuncGen_freq(FGtype,val)	variable FGtype, val	variable/g FuncGenAFP_device	variable/g SRS345offset			// Hamilton/NIST/Michigan SRSs	variable/g HP3325Aoffset	 	// NIST HPs	string command		sprintf command, "MENA 0"							// Check if MENA is the code for the HP3325A to turn on/off MOD/SWP function		 NIFIDWriteGPIB(FuncGenAFP_device,command)				sprintf command, "FREQ %20.8f3",val					//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)			//if using SRS345offset//		sprintf command, "FR %20.8fHZ",val					//if using HP3325Aoffset//		 NIFIDWriteGPIB( NIFIDFuncGenDrive_offset,command)		//if using HP3325AoffsetendFunction  NIFIDafpWrFuncGen_SetSweep(FGType,fStart,fStop,fRate)	variable FGtype, fStart, fStop, fRate				//Rate in kHz/sec	variable/g FuncGenAFP_device	variable/g SRS345offset			// Hamilton/NIST/Michigan SRSs	variable/g HP3325Aoffset		 	// NIST HPs	string command			sprintf command, "STFR %20.8f3",fStart					//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)			//if using SRS345offset		sprintf command, "SPFR %20.8f3",fStop				//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)			//if using SRS345offset		sprintf command, "RATE %8.3f",(fRate*1000/(fstop-fstart))		//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)			//if using SRS345offsetendFunction  NIFIDafpWrFuncGen_Modulation(FGType)	variable FGtype	variable/g FuncGenAFP_device	variable/g SRS345offset			// Hamilton/NIST/Michigan SRSs	variable/g HP3325Aoffset		 	// NIST HPs	string command			sprintf command, "MTYP 0"							// Check if MTYP is the code for the HP3325A to set modulation to single sweep		 NIFIDWriteGPIB(FuncGenAFP_device,command)				sprintf command, "MENA 1"							// Check if MENA is the code for the HP3325A to turn on/off MOD/SWP function		 NIFIDWriteGPIB(FuncGenAFP_device,command)			sprintf command, "TSRC 0"							// Check if TSRC is the code for the HP3325A to set to single trigger		 NIFIDWriteGPIB(FuncGenAFP_device,command)							endFunction  NIFIDafpWrFuncGen_sweep(FGType)	variable FGtype	variable/g FuncGenAFP_device	variable/g SRS345offset			// Hamilton/NIST/Michigan SRSs	variable/g HP3325Aoffset		 	// NIST HPs	string command		sprintf command, "*TRG"							//if using SRS345offset		 NIFIDWriteGPIB(FuncGenAFP_device,command)		//if using SRS345offsetend// =====================================DISPLAY UTILITIES ======================================function  NIFIDDisplayXupGraph(xwavename)	string xwavename	 DoWindow/k xup_graph	 if (exists(xwavename) != 0)	 	variable x0=30, y0=20, dx=520, dy=250		display/k=1/w=(x0, y0, x0+dx, y0+dy) $xwavename		DoWindow/C xup_graph	else		printf "wave:  %s does not exist\r", xwavename	endifEndfunction  NIFIDDisplayYupGraph(xwavename)	string xwavename	string ywavename	ywavename = "y"+xwavename[1,strlen(xwavename)]	 DoWindow/k yup_graph	  if (exists(ywavename) != 0)	 	variable x0=370, y0=20, dx=320, dy=150		display/k=1/w=(x0, y0, x0+dx, y0+dy)  $ywavename		DoWindow/C yup_graph		TextBox/A=RT /F=1 /E=2 ywavename	else		printf "wave:  %s does not exist\r", ywavename	endifEndfunction  NIFIDDisplayRupGraph(rwavename)	string rwavename	if (exists(rwavename) != 1) 	  	printf "waves:  %s does not exist\r", rwavename	  	return -1	endif	DoWindow/k Rup_graph	 	variable x0=370, y0=270, dx=300, dy=125	display/k=1/w=(x0, y0, x0+dx, y0+dy) Rup	DoWindow/C rup_graph	TextBox/A=RT /F=1 /E=2 rwavenameEndfunction NIFIDDisplayRawGraph()	String RawWaveName = "DAQXup"	if (exists(RawWaveName) != 1) 	  	printf "waves:  %s does not exist\r", RawWaveName	  	return -1	endif	DoWindow/k Raw_graph	 	variable x0=100, y0=370, dx=320, dy=125	display/k=1/w=(x0, y0, x0+dx, y0+dy) $RawWaveName	DoWindow/C Raw_graph	TextBox/A=RT /F=1 /E=2 RawWaveNameEndFunction  NIFIDDisplayRawFFTGraph()	string xwavename = "DAQXup"	variable padlength = 256	duplicate/o $xwavename RawFFTwave, RawFFTup	//Remove Initial Pulse to clear up area near signal.	if (1==1)		variable PulseLength=0.002		variable Nmute, Newlength,i		Nmute=ceil(PulseLength/deltax(RawFFTwave))		Newlength= numpnts(RawFFTwave)-Nmute		i=0		do			RawFFTwave[i]=RawFFTwave[i+Nmute]			i=i+1		while (i<NewLength)		Redimension/N=(NewLength) RawFFTwave	endif	do		padlength=padlength*2	while (numpnts(RawFFTwave)>padlength)	padlength = max(numpnts(RawFFTwave), padlength)	FFT /MAG /PAD=(padlength) /DEST=RawFFTmag RawFFTwave	duplicate/o RawFFTmag DAQXupFFT	DoWindow/k RawFFT_graph 	variable x0=500, y0=370, dx=320, dy=125	display/k=1/w=(x0, y0, x0+dx, y0+dy) DAQXupFFT	ModifyGraph mode=0	DoWindow/C RawFFT_graphend//  ================================= UTILITIES ==============================================macro  NIFIDKillDataWaves(startwv,endwv)	variable startwv=0,endwv=50	variable/g NMRScannum	string CmdName	variable i=startwv	 Print "Killing Data Waves from ",startwv," to ",endwv	do		sprintf CmdName, "KillWaves/Z xup%g,yup%g,xdown%g,ydown%g, rup%g, param%g, NIFIDparam%g", i,i,i,i,i,i,i		execute CmdName		sprintf CmdName, "AmpHistory[%g]=NaN;timeHistory[%g]=NaN;PDirectionHistory[%g]=NaN;T2History[%g]=NaN;ErrorHistory[%g]=NaN;StringHistory[%g]=\"\" ", i,i,i,i,i,i		execute CmdName		execute CmdName		i=i+1	while(i<=endwv)	NMRScannum = startwv	Printf "New Scans start at number : %d\r", NMRScannumend function  NIFIDWaveName2Num(wavename)	string wavename	string number = ""	variable i = 0	do		if(char2num(wavename[i]) > 47 && char2num(wavename[i]) < 58)			number += wavename[i]		endif		i +=1	while(strlen(wavename) > i)	if(strlen(number) <= 0)		return -1	endif	return str2num(number)endfunction  NIFIDString2List(IgnString)	string IgnString	string number = ""	make/o IgnoredWaves	variable i=0	variable listnum=1	if (strlen(IgnString) != 0)	do		if(char2num(IgnString[i]) > 47 && char2num(IgnString[i]) < 58)			number += IgnString[i]			if (i+1==strlen(IgnString))				IgnoredWaves[listnum]=str2num(number)				listnum+=1				number = ""			endif		elseif(char2num(IgnString[i])==44)			IgnoredWaves[listnum]=str2num(number)			listnum+=1			number = ""		endif	i += 1	while(strlen(IgnString)>i)	IgnoredWaves[0]=listnum	redimension/n=(IgnoredWaves[0]) ignoredwaves	endif	return IgnoredWaves[0]end	macro  NIFIDOpenFile()	string DAQfilename = "C:\\home\\3He\\NPDG_3He_NMR.txt"	variable/g DAQfile		close/A	open/Z=0 DAQfile as DAQfilenameendmacro  NIFIDCloseFiles()	close/aendfunction  NIFIDSaveSweepInFile(scannum)	variable scannum	variable/g DAQfile	WAVE TimeHistory, AmpHistory, PDirectionHistory, freqHistory, phaseHistory, T2History, ErrorHistory	WAVE/T  StringHistory	WAVE DIO, AIO	variable tyme= TimeHistory[scannum]	variable amp= AmpHistory[scannum]	variable direction= PDirectionHistory[scannum]	variable cent= FreqHistory[scannum]	variable fwhm= phaseHistory[scannum]	variable t2= T2History[scannum]	variable err= ErrorHistory[scannum]	string    strhist= StringHistory[scannum]		FSetPos DAQfile, 0	fprintf  DAQfile,	"NMRNum= %.5d\tTime= %u\tAmp= %.4gmV\tDirection= %d\tT2= %.2gms", scannum, tyme, amp,direction,T2	fprintf  DAQfile,	"\tcent= %.5g\tFWHM= %.3g\tError=%d\tstrhist= %s\t%s\t",  cent,fwhm, err,strhist,secs2date(tyme,0) + "::::"+ secs2time(tyme,2)	fprintf	DAQfile,	"Temp= %.4g\tFAPI1= %.4g\tFAPP1= %.4g\tFAPI1= %.4g\tFAPP1= %.4g", AIO[3],AIO[4],AIO[5],AIO[6],AIO[7]	fprintf	DAQfile,	"\r"endmacro  NIFIDSaveHistoryFile(filename)	string filename	duplicate/o Timehistory, time2, Scannumhistory		Scannumhistory = x	edit/k=1 Scannumhistory, Timehistory, Amphistory, PDirectionHistory, TypeHistory,ErrorHistory,FWHMhistory, Centhistory,T2History, stringhistory, time2	DoWindow/C tmptable	ModifyTable format(Timehistory)=1, format(time2)=8		save/J/W/F Scannumhistory, Timehistory, Amphistory, Errorhistory,  FWHMhistory, Centhistory,stringhistory, time2 as filename	DoWindow/K tmptable	killwaves time2, scannumhistoryend// =============================== PANELS ================================//Window  NIFIDPanel():  Panel	variable/g NMRscannum	variable y0		DoWindow/K  NIFIDPanel	NewPanel/k=1/W=(790,50,790+318,50+650) as "NIFID Controls"	DoWindow/C  NIFIDPanel		TabControl ParamTabs, pos={1,5}, size={315,650}, proc= NIFIDControlTabChanger	TabControl ParamTabs, tabLabel(0)="Single",tabLabel(1)="Multiple", tabLabel(2)="Utilities", tabLabel(3)="Coil Utilities"		//  SINGLE Sweeps	TitleBox 		Single1 		pos={40,33}, frame=0, title="Single  NIFID Controls"	Button 		Singlebutton,	pos={20,70}, size={140,30},	title="Run  NIFID",		proc =  NIFIDButtonProc 	ValDisplay 	NMRscannum,pos={190,45}, size={120,30},title="NIFIDscanNum",mode = 1,		value = NMRscannum			y0=110	GroupBox 	 NIFIDfit1,	pos={ 10,y0},size={280,210},	title="Single Sweep Fitting"	Button	  NIFIDfitbutton,	pos={ 20,y0+22}, size={120,20},	title="Fit Single Sweep",			proc =  NIFIDButtonProc 	SetVariable 	 NIFIDfit2,	pos={160,y0+25},size={110,65},	title="name ",						value = GeneralNIFIDParamStrings[0]	SetVariable 	 NIFIDfit3,	pos={ 50,y0+60},size={110,65},	title="Amp (mV)",		limits={0,5000,0.01},	value =  NIFIDParam[12],	format="%.2g"	SetVariable 	 NIFIDfit4,	pos={180,y0+60},size={95,65},	title="Freq    ",		limits={0,4e3,20},	value =  NIFIDParam[13], 	format="%.0f"	SetVariable 	 NIFIDfit5,	pos={ 50,Y0+80},size={110,65},	title="Phase     ",		limits={-380,380,45},value =  NIFIDParam[15], 	format="%.0f"	SetVariable 	 NIFIDfit6,	pos={180,Y0+80},size={95,65},	title="T2       ",		limits={0,1,0.01},	value =  NIFIDParam[14],	format="%.2g"	SetVariable 	 NIFIDfit7,	pos={90,Y0+100},size={125,65},	title="Relative Phase",	limits={0,1,1},	value =  NIFIDParam[16]	Button	  NIFIDfitTestbutton,	pos={50,y0+125}, size={90,20},	title="Test Params",			proc =  NIFIDButtonProc 	Button	  NIFIDfitSetbutton,	pos={170,y0+125}, size={100,20},	title="Set Params to Fit",			proc =  NIFIDButtonProc //	Button   NIFIDfitRmOffsetbutton,pos={180,y0+125}, size={100,20},	title="Current Data",			proc =  NIFIDButtonProc 	CheckBox	 NIFIDfitShowFFT, pos={20,y0+163}, title="show", value = GeneralNIFIDparam[3], 					proc =  NIFIDCheckBoxProc	Button 		GraphFFTbutton,	pos={70,y0+160}, 	size={70,20},	title="FFT Graph",			proc =  NIFIDButtonProc 	CheckBox	 NIFIDfitShowR, pos={160,y0+163}, title="show", 	value = GeneralNIFIDparam[4],					proc =  NIFIDCheckBoxProc	Button 		GraphRbutton,	pos={210,y0+160}, 	size={70,20},	title="R Graph",			proc =  NIFIDButtonProc 		CheckBox	 NIFIDfitShowRaw, pos={20,y0+188}, title="show", value = GeneralNIFIDparam[0], 					proc =  NIFIDCheckBoxProc	Button 		GraphRawbutton,	pos={70,y0+185}, 	size={70,20},	title="Raw Graph",			proc =  NIFIDButtonProc //	CheckBox	 NIFIDfitShowRawFFT, pos={160,y0+188}, title="show", 	value = 1,					proc =  NIFIDCheckBoxProc	Button 		GraphRawFFTbutton,	pos={210,y0+185}, 	size={70,20},	title="Raw FFT",			proc =  NIFIDButtonProc 	y0=y0+220	GroupBox  NIFIDFitBox,		pos={10,y0},size={220,45},	title="Fit Type"	PopupMenu  NIFIDexpfitval,	pos={15,y0+20}, title="Fit Type to Use",value="Poly;Exp;SineX;SineXY",proc =  NIFIDPopUpProc,		mode= 4	//Polynomial = 1, Exponential = 2, Sine = 3	ValDisplay  NIFID100, 	pos={180,y0+20},size={40,16},	title="flag=",limits={0,1,1	},		value=  NIFIDParam[11],	help={""}			y0=y0 + 20 	GroupBox 	 NIFID1 	pos={10, y0+33}, size={280,195}, title="NIFID Parameters"//	TitleBox 		 NIFID2Null,	pos={20,  y0+60},	frame=0, 	title="Frequency (Hz)          requires GPIB"	SetVariable 	 NIFID2, 	pos={20,  y0+60},size={190,16}, 	title="Frequency (Hz)          ",	limits={0,2e6,500},	value=  NIFIDParam[0], format="%.5g"	ValDisplay  NIFID2_field, 	pos={210, y0+60},size={60,16}, 	title=" = ",	format = "%.5g",	frame = 0,			value=  NIFIDParam[0]/3243.4101	TitleBox   NIFID2_Gauss,		pos={270,y0+60}, size={20,16}, 	title=" G", 	frame = 0	SetVariable 	 NIFID3, 	pos={20,  y0+80},size={190,16},	title="Pulse Length  (S)         ",	limits={0,0.01,1e-3},	value=  NIFIDParam[1]//	TitleBox 		 NIFID4Null,	pos={20,y0+100},	frame=0, 	title="RF Amplitude (V)          requires GPIB"	SetVariable 	 NIFID4, 	pos={20,y0+100},size={190,16}, 	title="RF Amplitude (V)          ",	limits={0.3,10,.1},		value=  NIFIDParam[2]	SetVariable 	 NIFID5,	pos={20, y0+120},size={190,16}, title="B Field (V)                   ",	limits={0,10,1},		value=  NIFIDParam[3]	SetVariable 	 NIFID6,	pos={20, y0+140},size={190,16}, title="Readout Time               ",	limits={0,1,0.02},		value=  NIFIDParam[4]	SetVariable 	 NIFID7, 	pos={20, y0+180},size={190,16}, title="Lowpass Filter (Hz)       ",	limits={0,1e5,100},	value=  NIFIDParam[6]	SetVariable 	 NIFID8, 	pos={20, y0+160},size={190,16}, title="Additional Mute Time (S)",	limits={-1e-2,1e-2,0.5e-3},	value=  NIFIDParam[7]	SetVariable 	 NIFIDSigMax, pos={20, y0+200},size={190,16}, title="Signal Range       ",	limits={0.1, 10, 1},	value=  NIFIDParam[26]	y0=y0+230	GroupBox  NIFIDhardwareBox,		pos={10,y0},size={220,65},	title="Hardware"	PopupMenu  NIFIDlockinVal,	pos={15,y0+20}, title="Lock-In Mode",value="Computer;Mixer;LockIn",proc =  NIFIDPopUpProc,		mode= 1		//Lockin Mode:  0 = Computer;		1 = mixer (only x);	2 = Lockin (x and y)	ValDisplay  NIFIDlockinFlag, 	pos={180,y0+20},size={40,16},	title="flag=",limits={0,1,1	},		value=  NIFIDParam[34],	help={""}	PopupMenu  NIFIDrfVal,	pos={15,y0+40}, title="RF Mode",value="NI Board;GPIB Func. Gen.",proc =  NIFIDPopUpProc,		mode= 1		//RF Mode:  0 = NI Board;		1 = GPIB Func. Gen.;		ValDisplay  NIFIDrfFlag, 	pos={180,y0+40},size={40,16},	title="flag=",limits={0,1,1	},		value=  NIFIDParam[35],	help={""}	Button 		HelpButton,	pos={238,y0+30}, 	size={70,20},	title="Help",			proc =  NIFIDButtonProc 	//MULTIPLE	TitleBox SDtitlebox 		pos={40,25}, 	frame=0,			 title="SpinDown / Pump Rate / NMR Loss"		y0=70	GroupBox 	SD1,	pos={10,y0+0},	size={280,165},	title="Spin Down"	Button 	SDbutton,	pos={ 20,y0+20}, size={95,20},		title="Start Spin Down",	proc =  NIFIDButtonProc 	Checkbox   	SD2, 		pos={120,90},size={160,16},	title="Wait 1 Hour Before Spin Down ",			proc= NIFIDCheckBoxProc,		value= 1	SetVariable 	SD4, 	pos={120,y0+40},size={160,16}, 	title="Time Interval (hrs)       ",	limits={0,100,1},	value= GeneralNIFIDParam[7]	TitleBox 		SD5,	pos={60,y0+60},	frame=0, 		title="ABORT to stop (Lower Left Command Window)"		GroupBox 	SD8,	pos={15,y0+80},size={270,80},	title="Spin Down Fitting"	Button 		SDFitbutton,pos={ 20,y0+110}, size={125,20},	title="Fit Spin Down Data",				proc =  NIFIDButtonProc 	SetVariable 	SD9, 	pos={149,y0+100},size={128,16},	title="First Scan Num",	limits={0,1000,1},	value= GeneralNIFIDParam[8]	SetVariable 	SD10, 	pos={149,y0+120},size={128,16}, 	title="Last Scan Num ",	limits={0,1000,1},	value= GeneralNIFIDParam[9]	SetVariable 	SD11, 	pos={130,y0+140},size={147,16}, 	title="NMR Loss (not %)",limits={0,0.5,1e-4},value= GeneralNIFIDParam[10]	y0=y0+140+50			GroupBox 	Loss1,	pos={10,y0+0},size={280,125},	title="NMR Loss"	Button 	Lossbutton,pos={ 20,y0+20}, 	size={100,20},	title="Start NMR Loss",	proc =  NIFIDButtonProc 	SetVariable 	Loss2, 	pos={140,y0+20},size={140,16},	title="Number of Sweeps",	limits={0,20,1}, value= GeneralNIFIDParam[11]		GroupBox 	Loss4,	pos={15,y0+50},size={270,70},	title="NMR Loss Fitting"	Button 	LossFitbutton,	pos={ 20,y0+70}, size={120,20},	title="Fit NMR Loss Data",				proc =  NIFIDButtonProc 	SetVariable 	Loss5, 	pos={150,y0+70},size={130,16},	title="First Scan Num.",	limits={0,1000,1},	value= GeneralNIFIDParam[12]	Button LossTablebutton,pos={ 50,y0+95}, size={90,20},	title="Show Table",						proc =  NIFIDButtonProc 	SetVariable 	Loss6, 	pos={150,y0+90},size={130,16}, 	title="Last Scan Num. ",	limits={0,1000,1},	value= GeneralNIFIDParam[13]	y0=y0+100 + 50		GroupBox 	Rate1,	pos={ 10,y0+0},size={280,130},	title="Pump Rate"	Button 		Ratebutton,pos={ 20,y0+20}, size={110,20},	title="Start Pump Rate",	proc =  NIFIDButtonProc 	SetVariable 	Rate2, 	pos={150,y0+20},size={130,16},	title="Time Interval    ",	limits={0,20,.001},	value= GeneralNIFIDParam[15]	TitleBox 		Rate5,	pos={ 130,y0+40},	frame=0, 	title="ABORT to stop"		GroupBox 	Rate6,	pos={15,y0+55},	size={270,70},title="Pump Rate Fitting"	Button 	RateFitbutton,pos={ 20,y0+75}, size={120,20},title="Fit Pump Rate",	proc =  NIFIDButtonProc 	SetVariable 	Rate7, 	pos={150,y0+75},size={130,16},title="First Scan Num.",	limits={0,1000,1},	value= GeneralNIFIDParam[18]	SetVariable 	Rate8, 	pos={150,y0+95},size={130,16}, title="Last Scan Num. ",	limits={0,1000,1},	value= GeneralNIFIDParam[19]	Button RateTablebutton,pos={ 50,y0+100}, size={90,20},	title="Rate Table",						proc =  NIFIDButtonProc 	y0=y0+100+60		GroupBox	IgnWaves1,		pos={10,y0},		size={280,65},title="Ignore Data Waves During Fits"	TitleBox 		IgnWaves2,		pos={20,y0+20},	frame=0, 	title="Scan nums, separated by commas, to ignore in all fits"	SetVariable	IgnWaves3, 		pos={40,y0+40},	size={240,16},	title=" ",limits={0,2e3,1},	value= GeneralNIFIDParamStrings[10]	y0=y0+40+10			//  UTILITIES (tab=3)		y0=80					// y0next + 70	GroupBox 	BField1,	pos={10,y0+0   },	size={280,60},title="Magnetic Field Control"	Button 	BFieldbutton,	pos={ 20,y0+28}, 	size={80,20},	title="Set Field",						proc =  NIFIDButtonProc 	SetVariable 	BField2, 	pos={120,y0+20},	size={150,16},title="New Voltage ",limits={-10,10,1e-3},	value= GeneralNIFIDParam[1]	ValDisplay 	BField4, 	pos={120,y0+40},	size={130,16}, title="Current Value  ",	format="%g",		value= GeneralNIFIDParam[2]	y0=y0+60+10		GroupBox 	Graph1,			pos={10,y0+0   },	size={280,45},title="Utilities"	Button 		UtilHistTablebutton,pos={ 30,y0+20}, size={110,20},	title="NMR History Table",	proc =  NIFIDButtonProc 	Button 		UtilSaveHistbutton,pos={ 170,y0+20}, size={90,20},	title="Save History File ",	proc =  NIFIDButtonProc 	y0=y0+45 +10		GroupBox	KillWaves1,		pos={10,y0},		size={280,45},title="Kill Data Waves"	Button 		KillWavesbutton,	pos={20,y0+20}, 	size={100,20},title="KillDataWaves",		proc =  NIFIDButtonProc 	SetVariable	KillWaves3, 		pos={125,y0+20},	size={80,16},	title="Start",limits={0,2e3,1},	value= GeneralNIFIDParam[21]	SetVariable	KillWaves4, 		pos={210,y0+20},	size={70,16}, 	title="End",limits={0,2e3,1},	value= GeneralNIFIDParam[22]	y0=y0+45+10		GroupBox	AFPControl1,		pos={10,y0},		size={280,75},title="Flip Polarization"	Button	 	AFPBOpenCtrlWindow,	pos={20,y0+20}, size={120,20},	title="B-Sweep AFP Panel",			proc =  NIFIDButtonProc 	Button	 	AFPFOpenCtrlWindow,	pos={150,y0+20}, size={120,20},	title="F-Sweep AFP Panel",			proc =  NIFIDButtonProc //	TitleBox 		AFPNull,	pos={20,  y0+50},	frame=0, 	title="Be Careful:  You are not using GPIB"	y0=y0+65+10		GroupBox 	UtilInit1,			pos={10,y0+0   },	size={280,75},	title="Initialization"	Button 		UtilNIFIDinitbutton,	pos={  20,y0+20}, 	size={60,20},		title="NIFID init",			proc =  NIFIDButtonProc //	Button 		UtilGPIBinitbutton,	pos={110,y0+20}, 	size={70,20},		title="GPIB init",		proc =  NIFIDButtonProc 	Button 		UtilGenInitbutton,	pos={210,y0+20}, 	size={70,20},		title="General Init",		proc =  NIFIDButtonProc 	Button 		UtilDIOinitbutton,	pos={20,y0+50}, 	size={60,20},		title="DIO Init",		proc =  NIFIDButtonProc 	Button 		UtilDAQResetbutton,pos={ 110,y0+50}, size={70,20},	title="NIDAQ reset",	proc =  NIFIDButtonProc 	Button 		UtilDAQerrorbutton,pos={210,y0+50}, size={70,20},		title="NIDAQ error",	proc =  NIFIDButtonProc 	y0=y0+70+20		GroupBox 	NIDAQ1,	pos={10,y0+0   },	size={280,75},title="NIDAQ"	Button 	NIDAQdiobutton,	pos={ 20,y0+20}, 	size={95,20},title="Set DIO Chan",		proc =  NIFIDButtonProc 	SetVariable 	NIDAQ2,	pos={125,y0+20}, 	size={58,20},	title="Chan",	limits={0,8,1},		value= GeneralNIFIDParam[25]	SetVariable 	NIDAQ3,	pos={190,y0+20}, 	size={95,20},	title="Value (0/1)",	limits={0,1,1},	value= GeneralNIFIDParam[26]	titlebox		NIDAQ4,	pos={ 20,y0+50}, 	size={95,20},	title="Read DIO Chan" 	SetVariable 	NIDAQ5,	pos={125,y0+50}, 	size={58,20},	title="Chan",	limits={0,8,1},		value= GeneralNIFIDParam[27]	ValDisplay 	NIDAQ6,	pos={190,y0+50}, 	size={70,20},   title="Value",	format="%g", 		value = DIOinfo[GeneralNIFIDParam[27]]	y0=y0+80 +10	GroupBox 	GPIBa1,	pos={10,y0+0   },	size={280,100},	title="GPIB"	SetVariable 	GPIBa2,	pos={120,y0+15}, 	size={150,20},	title="Device Name ",		value= GeneralNIFIDParamStrings[3]	Button 		GPIBawritebutton,	pos={ 20,y0+35}, 	size={80,20},	title="Write",			proc =  NIFIDButtonProc 	SetVariable 	GPIBa3,	pos={120,y0+35}, 	size={170,20},	title="String ",				value= GeneralNIFIDParamStrings[1]	Button 		GPIBareadbutton,	pos={ 20,y0+60},	size={80,20},	title="Read",			proc =  NIFIDButtonProc 	SetVariable 	GPIB6,	pos={120,y0+60}, 	size={170,20},	title="String ",				value= GeneralNIFIDParamStrings[2]	ValDisplay 	GPIB7, 	pos={120,y0+80},	size={115,16}, 	title="Response ",	format="%g",	value= GeneralNIFIDParam[28]	// Coil Utilities	y0=80					// y0next + 70	GroupBox 	Qscan1,	pos={10,y0+0   },	size={280,105},title="Find Q for Coil"	titlebox		Qscan2,	pos={ 20,y0+20}, 	frame=0, size={95,20},	title="Make Sure that you change the Field First!!!" 	Button 	Qscanbutton,	pos={ 20,y0+58}, 	size={80,20},	title="Q sweep",						proc =  NIFIDButtonProc 	SetVariable 	Qscan3, 	pos={120,y0+40},	size={150,16},title="Q Start Freq.",limits={1e3,400e3,1e3},	value= GeneralNIFIDParam[41]	SetVariable 	Qscan4, 	pos={120,y0+60},	size={150,16},title="Q Stop Freq.",limits={1e3,400e3,1e3},		value= GeneralNIFIDParam[42]	SetVariable 	Qscan5, 	pos={120,y0+80},	size={150,16},title="Q Step Freq.",limits={1e1,400e3,1e3},		value= GeneralNIFIDParam[43]	y0=y0+80+30				GroupBox 	Other,	pos={10,y0+0   },	size={280,50},title="Other Comments"	titlebox		Other1,	pos={ 20,y0+20}, 	frame=0, size={95,20},	title="-- see \"LoopInductance()\" at the end of the code" 	 NIFIDControlTabChanger("ParamTabs",0)endWindow AFPBPanel():  Panel	variable y0=50		DoWindow/K AFPBPanel	NewPanel/k=1/W=(400,50,400+325,50+530) as "AFPB Controls"	DoWindow/C AFPBPanel	TitleBox 		AFPBGuide1, pos={10,y0-30}, frame=0,	title="The following actions are presented vertically "	TitleBox 		AFPBGuide2, pos={10,y0-10}, frame=0,	title=" in the order they need to be performed. Either"	TitleBox 		AFPBGuide3, pos={10,y0+10}, frame=0,	title=" B sweep can be performed once the previous "	TitleBox 		AFPBGuide4, pos={10,y0+30}, frame=0,	title="steps are completed."	y0+=50 	GroupBox 	AFPBSweepParamTitle,	pos={10,y0+0   },	size={310,110},	title="AFP Magnetic Field Sweep Parameters"	SetVariable 	AFPBSweepStart,	pos={15,y0+20}, 		size={150,20},	title="Start Field (V)",		limits={0,20,0.5},		value= GeneralNIFIDParam[34] 	SetVariable 	AFPBSweepStop,	pos={170,y0+20}, 	size={140,20},	title="Stop Field (V)",		limits={0,20,0.5},		value= GeneralNIFIDParam[35] 	SetVariable 	AFPBSweepRate,	pos={15,y0+40}, 	size={150,20},	title="Sweep Rate (V/s)",		limits={0,10,0.5},	value= GeneralNIFIDParam[36] 	SetVariable 	AFPBTstep,			pos={170,y0+40}, 	size={140,20},	title="Wait Time (s)",		limits={0,1,0.0005},	value= GeneralNIFIDParam[37] 		//To manually set step rate for B sweep	SetVariable 	AFPBRFFreq,		pos={15,y0+60}, 	size={150,20},	title="rF Frequency (Hz)",	limits={0,1e6,1000},	value= GeneralNIFIDParam[38] 	SetVariable 	AFPBRFAmp,		pos={170,y0+60}, 	size={140,20},	title="rF Amplitude (s)",	limits={0,1e6,1000},	value= GeneralNIFIDParam[39] 	CheckBox 	AFPBUseGPIBCheckBox, 	pos={20, y0+80},size={100,16}, title="Use GPIB ",	value =  NIFIDParam[10],  proc= NIFIDCheckBoxProc	SetVariable 	GPIBaa2,	pos={120,y0+80},	size={150,120},	title="Func. Gen. GPIB Addr.",limits={0,15,1},	value= GeneralNIFIDParamStrings[9]		y0+=150	GroupBox 	AFPBSweepProcTitle,	pos={10,y0-30   },	size={290,300},	title="AFP Magnetic Field Sweep Procedure"	if (NIFIDParam[23]<1)		//Only at the beginning before you change B field		Button 		FIDbeforeAFPB,			pos={90,y0-10}, size={110,20},	title="Optional FID Before",		proc =  NIFIDButtonProc 	else		Button 		FIDbeforeAFPB,			pos={90,y0-10}, size={110,20}, title="Optional FID Before", disable=2	endif	Button	 	AFPBPrepField,	pos={20,y0+22}, size={130,20},	title="Prepare Field",			proc =  NIFIDButtonProc 	TitleBox 		AFPBCoil_Out,	pos={20,y0+50}, 		frame=0,		title="Unplug Pickup Coil (Recommended)"//	SetVariable 	AFPFDevName,	pos={160,y0+70}, 	size={135,20},	title="FuncGen GPIB Addr.",	limits={0,15,1}, value= GeneralNIFIDParamStrings[9] 	if( NIFIDParam[23] == 1 ||  NIFIDParam[23] == 2 ||  NIFIDParam[23] == 4)		Button	 	AFPBPrepRF,	pos={20,y0+68}, size={130,20},	title="Prep. Function Generator",			proc =  NIFIDButtonProc 	else		Button	 	AFPBPrepRF,	disable = 2,	pos={20,y0+68}, size={130,20},	title="Prep. Function Generator",			noproc 	endif	if (NIFIDParam[10]==0)		Button	 	AFPBPrepRF,	disable = 2,	pos={20,y0+68}, size={210,20},	title="Manualy Turn On Func. Gen. (No GPIB)",			noproc 	endif	TitleBox 		AFPBAmpOn,	pos={20,y0+95}, 	frame=0,		title="Turn On Amplifier (wait 30 sec)"	if( NIFIDParam[23] == 2)		Button	 	AFPBSweepU,	pos={20,y0+114}, size={120,20},	title="B Sweep Up",			proc =  NIFIDButtonProc 		Button	 	AFPBSweepUD,	pos={160,y0+114}, size={120,20},	title="B Sweep Up & Down",			proc =  NIFIDButtonProc 	else		Button	 	AFPBSweepU,	disable = 2, pos={20,y0+114}, size={110,20},	title="One B Sweep Up",			noproc 		Button	 	AFPBSweepUD,	disable = 2, pos={140,y0+114}, size={150,20},	title="Multiple B Sweep Up & Down",			noproc 	endif	SetVariable	AFPFNsweeps,	pos={190,y0+134}, 	size={100,20}, 	title="N sweeps", limits={1,1000,1}, value = GeneralNIFIDParam[40]	TitleBox 		AFPBAmpOff,	pos={20,y0+145}, 	frame=0,		title="Turn Off Amplifier (wait 30 sec)"	if( NIFIDParam[23] == 2 ||  NIFIDParam[23] == 3)		Button	 	AFPBResetRF,	pos={20,y0+165}, size={130,20},	title="Reset Function Generator",			proc =  NIFIDButtonProc 	else		Button	 	AFPBResetRF,	disable = 2, pos={20,y0+165}, size={130,20},	title="Reset Function Generator",			noproc 	endif	if (NIFIDParam[10]==0)		Button	 	AFPBResetRF,	disable = 2, pos={20,y0+165}, size={210,20},	title="Manually Reset Func. Gen. (No GPIB)",			noproc 	endif	TitleBox 		AFPBCoil_In,	pos={20,y0+190}, 		frame=0,		title="Plug In Pickup Coil (Recommended)"	if( NIFIDParam[23] == 0)		Button	 	AFPBResetField,disable = 2,	pos={20,y0+215}, size={130,20},	title="Reset Field",			noproc 	else		Button	 	AFPBResetField,	pos={20,y0+215}, size={130,20},	title="Reset Field",			proc =  NIFIDButtonProc	endif	if (NIFIDParam[23]==0)		//Only after you change B field		Button 		FIDafterAFPB,			pos={90,y0+240}, size={110,20},	title="Optional FID After",		proc =  NIFIDButtonProc 	else		Button 		FIDafterAFPB,			pos={90,y0+250}, size={110,20}, title="Optional FID After", disable=2	endifEnd//=========================================== AFPF ====================================================function AFPFloss()	WAVE GeneralNIFIDParam, NIFIDParam	WAVE AmpHistory	NVAR NMRScanNum	variable startN, stopN, Nsweeps	string AFPLossStr	variable waittime = 2	variable UseGPIB = NIFIDParam[10]		NIFID()	sleep/s waittime	GeneralNIFIDParam[23]=NMRScanNum	AFPF()					//type is determined by NIFIDParam[10]  (gpib=1, ni board = 0)	sleep/s 2*waittime 				//to reset field	NIFID()	GeneralNIFIDParam[24]=NMRScanNum	startN=GeneralNIFIDParam[23]	stopN=GeneralNIFIDParam[24]	Nsweeps=GeneralNIFIDParam[40]	DoWindow/F AFPFPanel	//sprintf AFPlossStr, "Loss = %.2g%", 100*((AmpHistory[startN]-AmpHistory[stopN] )/AmpHistory[startN]) /Nsweeps	sprintf AFPlossStr, "Loss = %.2g%", 100*(1-(   (AmpHistory[stopN]/AmpHistory[startN] )^(1/Nsweeps) ) )	TitleBox 		AFPLossStr, pos={210,525}, frame=0,	title=AFPLossStrendfunction AFPFlossNoise()	WAVE GeneralNIFIDParam, NIFIDParam	WAVE AmpHistory	NVAR NMRScanNum	variable startN, stopN, Nsweeps	string AFPLossStr	variable waittime = 2	variable UseGPIB = NIFIDParam[10]	variable NPreLoss= GeneralNIFIDParam[44]	variable NPostLoss= GeneralNIFIDParam[45]		GeneralNIFIDParam[46]=NMRScanNum+1	NIFIDLoss(NPreLoss)	sleep/s waittime	GeneralNIFIDParam[47]=NMRScanNum	AFPF()					//type is determined by NIFIDParam[10]  (gpib=1, ni board = 0)	sleep/s 2*waittime 				//to reset field	GeneralNIFIDParam[48]=NMRScanNum+1		NIFIDLoss(NPostLoss)	GeneralNIFIDParam[49]=NMRScanNum	startN=GeneralNIFIDParam[23]	stopN=GeneralNIFIDParam[24]	Nsweeps=GeneralNIFIDParam[40]		AFPlossFit(GeneralNIFIDParam[46],GeneralNIFIDParam[47],GeneralNIFIDParam[48],GeneralNIFIDParam[49], GeneralNIFIDParam[40])	DoWindow/F AFPFPanel	//sprintf AFPlossStr, "Loss = %.2g%", 100*((AmpHistory[startN]-AmpHistory[stopN] )/AmpHistory[startN]) /Nsweeps	sprintf AFPlossStr, "Loss = %.2g%", 100*(1-(   (AmpHistory[stopN]/AmpHistory[startN] )^(1/Nsweeps) ) )	TitleBox 		AFPLossStr, pos={210,525}, frame=0,	title=AFPLossStrendFunction  AFPlossFit(prestart, prestop, poststart, poststop, NumAFPSweeps)	variable prestart, prestop, poststart, poststop	variable NumAFPSweeps	variable noise	string FIDwavename		print "in AFPLossFit(", prestart, prestop, poststart, poststop,")"		make/o AFPlossFitConstants = {prestart, prestop, poststart, poststop}	make/o/N=2 AFPlossData	variable j=0	variable i=0	for (j = prestart; j<=prestop;j=j+1)		Redimension/N=(i+1) AFPlossData		FIDwavename = "xup" + num2str(j)		AFPlossData[i]=NIFIDFit(FIDwavename)		i=i+1	endfor	for (j = poststart; j<=poststop;j=j+1)		Redimension/N=(i+1) AFPlossData		FIDwavename = "xup" + num2str(j)		AFPlossData[i]=NIFIDFit(FIDwavename)		i=i+1	endfor	DoWindow/k AFPlossGraph	variable x0, y0, dx, dy	x0=300; y0=200; dx=300; dy=150	Display/k=1/w=(x0, y0, x0+dx, y0+dy) AFPlossData	ModifyGraph mode=3	DoWindow/c AFPlossGraph		//	make/o/N=3 coefw 	variable Sig0, FIDloss,FIDlossSig, AFPloss,AFPlossSig, FIDnoise	Sig0 = AFPlossData[0]	FIDloss =  (AFPlossData[0]-AFPlossData[prestop-prestart])/AFPlossData[0] /(prestop-prestart)	AFPloss = (AFPlossData[prestop-prestart] - AFPlossData[prestop-prestart+1])/AFPlossData[prestop-prestart]	coefw = {Sig0, FIDloss, AFPloss}	WAVE M_Covar	duplicate/o AFPlossData, AFPlossFitData	FuncFit/q/M=2 AFPlossFitFunc, coefw, AFPlossData  /D=AFPlossFitData	appendtograph AFPlossFitData	Sig0 = coefw[0]	FIDloss = coefw[1]	FIDlossSig = sqrt(M_Covar[1][1])	AFPloss = 1 - (1-coefw[2])^(1/NumAFPSweeps)	AFPlossSig = sqrt(M_Covar[2][2])/coefw[2] * AFPloss	ModifyGraph lstyle(AFPlossFitData)=2,rgb(AFPlossFitData)=(0,0,52224)	duplicate/o AFPlossData, Residuals	Residuals = AFPlossData - AFPlossFitData	Wavestats/q Residuals	noise = V_sdev/AFPlossData[0]	variable LossEstimate = sqrt(2) * noise /(NumAFPSweeps*sqrt(prestop-prestart+1))		string txtstr	sprintf txtstr, "FIDloss = %.2f(%.2f)%%\r  AFPloss = %.2g(%.2f)%%\rNoise = %.2f%%\rN sweeps = %d",  FIDloss*100, FIDlossSig*100, AFPloss*100, AFPlossSig*100, noise*100,NumAFPSweeps	sprintf txtstr, "%s\rAFPloss Est. = %.2g%%", txtstr, LossEstimate*100	print txtstr		textbox/A=RT/F=0/B=1 txtstrendFunction AFPlossFitFunc(coefw, Npoint):	FitFunc	wave coefw	variable Npoint	WAVE AFPlossFitConstants	variable prestart, prestop, poststart, poststop	prestart = AFPlossFitConstants[0]	prestop = AFPlossFitConstants[1]	poststart = AFPlossFitConstants[2]	poststop = AFPlossFitConstants[3]	variable value	variable Sig0=coefw[0]	variable FIDloss = coefw[1]	variable AFPloss = coefw[2]		if (Npoint<=(prestop-prestart))		value = Sig0 *(1-FIDloss)^Npoint	else		value = Sig0 *((1-FIDloss)^Npoint)*(1-AFPloss)	endif//	print "FIDloss= ", FIDloss, "AFPloss = ", AFPloss,"  Npoint=", Npoint, "value = ", value	return valueendfunction AFPF()	WAVE NIFIDParam	variable UseGPIB = NIFIDParam[10]	if (UseGPIB==1)		AFPFgpib()	else		NIAFPF()	endifendfunction AFPFgpib()	variable Ntimes	variable/g NMRScanNum	WAVE GeneralNIFIDParam, NIFIDParam	variable FIDbfield=	NIFIDParam[5]	variable AFPbfield=	GeneralNIFIDParam[29]	variable RFamp=		GeneralNIFIDParam[30]	variable Fcent=		GeneralNIFIDParam[31]	variable Frange=		Fcent	variable Fmin, Fmax, Fsweeptime	variable Fsweeprate=		GeneralNIFIDParam[33]	variable NAFPSweeps=		GeneralNIFIDParam[40]	variable/g FuncGenAFP	string cmdstr	variable Waittime = GeneralNIFIDParam[37]		Fmax = 1.22*Fcent	Fmin = 0.60*Fcent	Fsweeptime = (Fmax-Fmin)/(FsweepRate*1e3)		// Set Field	 NIFIDSetField(AFPbfield)									//AFPbfield=	GeneralNIFIDParam[29]	 sleep/s 1	 	 //Initialize GPIB and Prep Function Generator	 sprintf cmdstr, "NIFIDafpGPIBinit();"	 execute cmdstr	 sleep/s 0.5	 NIFIDafpWrFuncGen_ampl(FuncGenAFP,RFamp)		//RFamp=		GeneralNIFIDParam[30]	sleep/S 0.5	//NIFIDafpWrFuncGen_SetSweep(FuncGenAFP,GeneralNIFIDParam[31],GeneralNIFIDParam[32],GeneralNIFIDParam[33])	NIFIDafpWrFuncGen_SetSweep(FuncGenAFP,Fmin,Fmax,FsweepRate)	sleep/S 0.5	NIFIDafpWrFuncGen_Modulation(FuncGenAFP)  	 sleep/S 0.5	 	 //Run AFP Sweeps	variable j	NIFIDafpWrFuncGen_sweep(FuncGenAFP)	for (j=1;j<NAFPsweeps;j=j+1)												//NafpSweeps=		GeneralNIFIDParam[40]		 sleep/s waittime		  NIFIDafpWrFuncGen_sweep(FuncGenAFP)	endfor	sleep/s waittime	//Bookeeping	NMRScanNum=NMRScanNum +1	WAVE/t StringHistory	StringHistory[NMRScanNum]="AFPF Sweep Up Pol Flip" + num2str(NAFPsweeps) +" times"	NIFIDParam[25]= (NIFIDParam[25] %^ 1)				//Toggle polarization direction		//Reset Func Gen and fielsd	NIFIDafpWrFuncGen_ampl(FuncGenAFP,.01)	sleep/s 0.25	NIFIDafpWrFuncGen_freq(FuncGenAFP,1)				//1Hz	sleep/s 1	NIFIDSetField( FIDbfield)							//FIDbfield=	NIFIDParam[5]endWindow AFPFPanel():  Panel	variable y0=50	DoWindow/K AFPFPanel	NewPanel/k=1/W=(450,50,450+318,50+800) as "AFPF Controls"	DoWindow/C AFPFPanel	TitleBox 		AFPFGuide1, pos={10,y0-30}, frame=0,	title="The following actions are presented vertically "	TitleBox 		AFPFGuide2, pos={10,y0-10}, frame=0,	title=" in the order they need to be performed. "	TitleBox 		AFPFGuide3, pos={10,y0+10}, frame=0,	title=""	TitleBox 		AFPFGuide4, pos={10,y0+15}, frame=0,	title="Automatic AFP requires GPIB"	y0+=50 	GroupBox 	AFPFSweepPrep,	pos={10,y0+0   },	size={290,150},	title="AFP Frequency Sweep Parameters"	SetVariable	AFPFSweepField,	pos={20,y0+20}, 	size={130,20}, 	title="B-Field", limits={0,10,0.5}, value = GeneralNIFIDParam[29]	SetVariable	AFPFRestField,		pos={160,y0+20}, size={130,20}, 	title="Resting B-Field", limits={0,10,0.5}, value =  NIFIDParam[5]	SetVariable 	AFPFSweepStart,	pos={20,y0+40}, 	size={130,20},	title="Cent. Freq. ",	limits={0,1e6,1000},	value= GeneralNIFIDParam[31] 	///SetVariable 	AFPFSweepStop,	pos={160,y0+40}, size={130,20},	title="Freq. Range",	limits={0,1e6,1000},			value= GeneralNIFIDParam[32] 	SetVariable 	AFPFSweepRate,	pos={20,y0+60}, 	size={130,20},	title="Rate (kHz/s)",	limits={0.001,1000,10},			value= GeneralNIFIDParam[33] 	SetVariable 	AFPFSweepAmp,	pos={160,y0+60}, size={130,20},	title="Amplitude(V)",	limits={0,2e1,.5},			value= GeneralNIFIDParam[30] 	TitleBox		AFPFA0OutputTitle,	pos={40,y0+85}, 	frame=0, title="AO chan. 0 goes to "	CheckBox	 AFPFA0OutBfield, 	pos={170,y0+85}, title="B Field", 		value = (0==NIFIDparam[32]),		mode=1,			proc =  NIFIDCheckBoxProc	CheckBox	 AFPFA0OutRF, 		pos={230,y0+85}, title="AFPF RF", 	value = NIFIDparam[32],	mode=1,			proc =  NIFIDCheckBoxProc	CheckBox	 AFPFgpib, 			pos={40,y0+105}, title=" use GPIB", 	value = NIFIDparam[10],	mode=1,				proc =  NIFIDCheckBoxProc	SetVariable 	GPIBaa2,			pos={140,y0+105},	size={150,120},	title="Func Gen GPIB Addr.",limits={0,15,1},		value= GeneralNIFIDParamStrings[9]	CheckBox	 AFPFni, 			pos={40,y0+125}, title=" use NI board", 	value = (0==NIFIDparam[10]),	mode=1,	proc =  NIFIDCheckBoxProc	SetVariable 	AFPFA0chan,		pos={140,y0+125},	size={150,120},	title="RF Analog Out Chan. ",limits={1,4,1},	value= NIFIDParam[33]	if (NIFIDParam[32]==0)		SetVariable 	AFPFA0chan,	limits={0,3,1}		if (NIFIDParam[33]==0)			print "NOTE:  AO 0 is usually set to control the main magnetic field."		endif		if (NIFIDParam[33]==1)			print "NOTE:  AO 1 is usually set to control the RF for FID."		endif		//NIFIDParam[33]=1	endif		y0= y0+160+10	GroupBox 	AFPFSweepAutoNoise,	pos={10,y0  },	size={290,230},	title="Automatic Frequency AFP with Noise"	//DrawText 	20, y0+30,	"Automatic AFP requires that the pickup coil be controled by a relay attached to DIO0"	TitleBox 		tb1noise, pos={20,y0+20}, frame=0,	title=" Under Construction"	Button 		CompleteAFPFnoise,		pos={20,y0+60}, size={110,20},	title="Automatic AFPF",		proc =  NIFIDButtonProc 	SetVariable	AFPFpreFIDLoss,	pos={150,y0+25}, 	size={140,20}, 	title="FID Loss Before", limits={1,1000,1}, value = GeneralNIFIDParam[44]		SetVariable	AFPFNsweeps2noise,	pos={150,y0+45}, 	size={140,20}, 	title="N AFP sweeps", limits={1,1000,1}, value = GeneralNIFIDParam[40]		SetVariable	AFPFWait2noise,	pos={150,y0+65}, 	size={140,20}, 	title="WaitTime", limits={0.5,100,0.5}, value = GeneralNIFIDParam[37]	SetVariable	AFPFpostFIDLoss,	pos={150,y0+85}, 	size={140,20}, 	title="FID Loss After", limits={1,1000,1}, value = GeneralNIFIDParam[45]		y0 = y0 + 105	GroupBox 	AFPlossFit6,	pos={15,y0+0},	size={270,120},title="AFPloss Fitting"	Button 	AFPlossFitbutton,pos={ 50,y0+20}, size={90,20},title="Fit",	proc =  NIFIDButtonProc 	SetVariable 	AFPlossFit7, 	pos={150,y0+20},size={130,16},title="Pre: First Scan ",	limits={0,1000,1},	value= GeneralNIFIDParam[46]	SetVariable 	AFPlossFit8, 	pos={150,y0+40},size={130,16}, title="Pre: Last Scan  ",	limits={0,1000,1},	value= GeneralNIFIDParam[47]	SetVariable 	AFPlossFit9, 	pos={150,y0+60},size={130,16},title="Post: First Scan",	limits={0,1000,1},	value= GeneralNIFIDParam[48]	SetVariable 	AFPlossFit10, 	pos={150,y0+80},size={130,16}, title="Post: Last Scan ",	limits={0,1000,1},	value= GeneralNIFIDParam[49]	SetVariable 	AFPlossFit11, 	pos={150,y0+100},size={130,16}, title="N AFP Sweeps ",	limits={0,1000,1},	value= GeneralNIFIDParam[40]	Button AFPlossTableButton,pos={ 50,y0+95}, size={90,20},	title="AFPloss Table",						proc =  NIFIDButtonProc 	y0= y0+100+40	GroupBox 	AFPFSweepProc,	pos={10,y0  },	size={290,160},	title="ManualAFP Frequency Sweep Procedure"	Button 		FIDbeforeAFPF,			pos={20,y0+20}, size={110,20},	title="Optional FID Before",		proc =  NIFIDButtonProc 	DrawText 	20, y0+60,	"Unplug pickup coil (reduces loss)"	Button	 	AFPFSweep,	pos={ 20,y0+70}, size={140,20},	title="F Sweep",		proc =  NIFIDButtonProc 	SetVariable	AFPFNsweeps,	pos={180,y0+65}, 	size={110,20}, 	title="N sweeps", limits={1,1000,1}, value = GeneralNIFIDParam[40]	SetVariable	AFPFWait,	pos={180,y0+85}, 	size={110,20}, 	title="WaitTime", limits={0,100,0.5}, value = GeneralNIFIDParam[37]	DrawText 	20, y0+120,	"Plug in pickup coil"	Button 		FIDafterAFPF,			pos={20,y0+125}, size={110,20},	title="Optional FID After",		proc =  NIFIDButtonProc 	y0= y0+160+20		GroupBox 	AFPFSweepAutomatic,	pos={10,y0  },	size={290,100},	title="Automatic AFP Frequency Sweep Procedure"	//DrawText 	20, y0+30,	"Automatic AFP requires that the pickup coil be controled by a relay attached to DIO0"	TitleBox 		tb1, pos={20,y0+20}, frame=0,	title="Automatic AFP requires that the pickup coil be controled"	TitleBox 		tb2, pos={20,y0+35}, frame=0,	title="by a relay attached to DIO0"	Button 		CompleteAFPF,		pos={20,y0+60}, size={110,20},	title="Automatic AFPF",		proc =  NIFIDButtonProc 	SetVariable	AFPFNsweeps2,	pos={180,y0+55}, 	size={110,20}, 	title="N sweeps", limits={1,1000,1}, value = GeneralNIFIDParam[40]		SetVariable	AFPFWait2,	pos={180,y0+75}, 	size={110,20}, 	title="WaitTime", limits={0.5,100,0.5}, value = GeneralNIFIDParam[37]EndFunction  NIFIDControlTabChanger(tabname,tabnum)	string tabname	variable tabnum		variable y0	WAVE  NIFIDParam			//  SINGLE Sweeps	TitleBox 		Single1 		disable = (tabnum != 0)	Button 		Singlebutton,		disable = (tabnum != 0)	ValDisplay 	NMRscannum,	disable =0		GroupBox 	 NIFIDfit1,		disable = (tabnum != 0)	Button	 	 NIFIDfitbutton,	disable = (tabnum != 0)	Button	  NIFIDfitSetbutton,	disable = (tabnum != 0)	SetVariable 	 NIFIDfit2,		disable = (tabnum != 0)	SetVariable 	 NIFIDfit3,		disable = (tabnum != 0)	SetVariable 	 NIFIDfit4,		disable = (tabnum != 0)	SetVariable 	 NIFIDfit5,		disable = (tabnum != 0)	SetVariable 	 NIFIDfit6,		disable = (tabnum != 0)	SetVariable 	 NIFIDfit7,		disable = (tabnum != 0)	Button	 	 NIFIDfitTestbutton,	disable = (tabnum != 0)		Button 		GraphRbutton,	disable = (tabnum != 0)	Button 		GraphFFTbutton,	disable = (tabnum != 0)	CheckBox	 NIFIDfitShowFFT, 	disable = (tabnum != 0)	CheckBox	 NIFIDfitShowR, 		disable = (tabnum != 0)		CheckBox	 NIFIDfitShowRaw, 		disable = (tabnum != 0)	Button 		GraphRawbutton,			disable = (tabnum != 0)	Button 		GraphRawFFTbutton,		disable = (tabnum != 0)		GroupBox  NIFIDFitBox, 		disable = (tabnum != 0)	PopupMenu  NIFIDexpfitval, 	disable = (tabnum != 0)	ValDisplay  NIFID100, 	 	disable = (tabnum != 0)		GroupBox 	 NIFID1, 		disable = (tabnum != 0)	TitleBox		 NIFID2Null,	disable = (tabnum != 0)  	//Turns off frequency when either not on the tab 	SetVariable 	 NIFID2, 		disable = (tabnum != 0 )	SetVariable 	 NIFID3, 		disable = (tabnum != 0)	TitleBox		 NIFID4Null,	disable = (tabnum != 0 )		//Turns off rf amplitude when either not on the tab or GPIB not in use	SetVariable 	 NIFID4, 		disable = (tabnum != 0)	SetVariable 	 NIFID5,		disable = (tabnum != 0)	SetVariable 	 NIFID6,		disable = (tabnum != 0)	SetVariable 	 NIFID7, 		disable = (tabnum != 0)	SetVariable 	 NIFID8, 		disable = (tabnum != 0)	SetVariable 	 NIFIDSigMax, 		disable = (tabnum != 0)	ValDisplay	 NIFID2_field, 	disable = (tabnum != 0)		TitleBox 		 NIFID2_Gauss,	disable = (tabnum != 0)	TitleBox 		 NIFID9Null,	disable = (tabnum != 0)		GroupBox  NIFIDhardwareBox,	disable = (tabnum != 0)	PopupMenu  NIFIDlockinVal,	disable = (tabnum != 0)	ValDisplay  NIFIDlockinFlag, 	disable = (tabnum != 0)	PopupMenu  NIFIDrfVal,		disable = (tabnum != 0)	ValDisplay  NIFIDrfFlag, 		disable = (tabnum != 0)	Button 		HelpButton,		disable = (tabnum != 0)			//MULTIPLE	TitleBox SDtitlebox 		disable = (tabnum != 1)		GroupBox 	SD1,		disable = (tabnum != 1)	Button 		SDbutton,	disable = (tabnum != 1)	Checkbox 	SD2, 		disable = (tabnum != 1)	SetVariable 	SD4, 		disable = (tabnum != 1)	TitleBox 		SD5,		disable = (tabnum != 1)		GroupBox 	SD8,		disable = (tabnum != 1)	Button 		SDFitbutton,	disable = (tabnum != 1)	SetVariable 	SD9, 		disable = (tabnum != 1)	SetVariable 	SD10, 		disable = (tabnum != 1)	SetVariable 	SD11, 		disable = (tabnum != 1)	GroupBox	IgnWaves1,	disable = (tabnum != 1)	TitleBox 		IgnWaves2,	disable = (tabnum != 1)	SetVariable	IgnWaves3, 	disable = (tabnum != 1)	GroupBox 	Loss1,		disable = (tabnum != 1)	Button 		Lossbutton,	disable = (tabnum != 1)	SetVariable 	Loss2, 		disable = (tabnum != 1)		GroupBox 	Loss4,		disable = (tabnum != 1)	Button 	LossFitbutton,	disable = (tabnum != 1)	SetVariable 	Loss5, 		disable = (tabnum != 1)	Button 	LossTablebutton,	disable = (tabnum != 1)	SetVariable 	Loss6, 		disable = (tabnum != 1)		GroupBox 	Rate1,		disable = (tabnum != 1)	Button 		Ratebutton,	disable = (tabnum != 1)	SetVariable 	Rate2, 		disable = (tabnum != 1)	TitleBox 		Rate5,		disable = (tabnum != 1)		GroupBox 	Rate6,		disable = (tabnum != 1)	Button 		RateFitbutton,disable = (tabnum != 1)	SetVariable 	Rate7, 		disable = (tabnum != 1)	SetVariable 	Rate8, 		disable = (tabnum != 1)		Button RateTablebutton,	disable = (tabnum != 1)			//  UTILITIES (tab=3)		GroupBox 	BField1,		disable = (tabnum != 2)	Button 		BFieldbutton,	disable = (tabnum != 2)	SetVariable 	BField2, 		disable = (tabnum != 2)	ValDisplay 	BField4, 		disable = (tabnum != 2)	GroupBox 	Graph1,			disable = (tabnum != 2)	Button 		UtilHistTablebutton,disable = (tabnum != 2)	Button 		UtilSaveHistbutton,	disable = (tabnum != 2)		GroupBox	KillWaves1,	disable = (tabnum != 2)	Button 		KillWavesbutton,	disable = (tabnum != 2)	SetVariable	KillWaves3, 	disable = (tabnum != 2)	SetVariable	KillWaves4, 	disable = (tabnum != 2)	GroupBox	AFPControl1,			disable = (tabnum != 2)	Button	 	AFPBOpenCtrlWindow,	disable = (tabnum != 2)	Button	 	AFPFOpenCtrlWindow,	disable = (tabnum != 2)	TitleBox 		AFPNull,	disable = (tabnum != 2)			GroupBox 	UtilInit1,			disable = (tabnum != 2)	Button 		UtilNIFIDinitbutton,	disable = (tabnum != 2)	Button 		UtilGenInitbutton,	disable = (tabnum != 2)	Button 		UtilDIOinitbutton,	disable = (tabnum != 2)	Button 		UtilDAQResetbutton,	disable = (tabnum != 2)	Button 		UtilDAQerrorbutton,	disable = (tabnum != 2)		GroupBox 	NIDAQ1,		disable = (tabnum != 2)	Button 		NIDAQdiobutton,	disable = (tabnum != 2)	SetVariable 	NIDAQ2,		disable = (tabnum != 2)	SetVariable 	NIDAQ3,		disable = (tabnum != 2)	titlebox 		NIDAQ4,		disable = (tabnum != 2)	SetVariable 	NIDAQ5,		disable = (tabnum != 2)	ValDisplay 	NIDAQ6,		disable = (tabnum != 2)		GroupBox 	GPIBa1,		disable = (tabnum != 2)	SetVariable 	GPIBa2,		disable = (tabnum != 2)	Button 		GPIBawritebutton,	disable = (tabnum != 2)	SetVariable 	GPIBa3,		disable = (tabnum != 2)	Button 		GPIBareadbutton,	disable = (tabnum != 2)	SetVariable 	GPIB6,		disable = (tabnum != 2)	ValDisplay 	GPIB7, 		disable = (tabnum != 2)			// Coil Utilities	GroupBox 	Qscan1,		disable = (tabnum != 3)	titlebox		Qscan2,		disable = (tabnum != 3)	Button 	Qscanbutton,	disable = (tabnum != 3)	SetVariable 	Qscan3, 	disable = (tabnum != 3)	SetVariable 	Qscan4, 	disable = (tabnum != 3)	SetVariable 	Qscan5, 	disable = (tabnum != 3)	GroupBox 	Other,	disable = (tabnum != 3)	titlebox		Other1,		disable = (tabnum != 3)endFunction  NIFIDCheckBoxProc(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	WAVE GeneralNIFIDParam,  NIFIDParam	strswitch(ctrlName)			case "AFPBUseGPIBCheckBox":			 NIFIDParam[10] = checked			 NIFIDControlTabChanger("ParamTabs",0)			if (checked ==1)				execute("NIFIDafpGPIBinit()")			endif			execute("AFPBPanel()")			break		case "NIFIDfitShowFFT":			GeneralNIFIDParam[3] = checked			break		case "NIFIDfitShowR":			GeneralNIFIDParam[4] = checked			break		case "NIFIDfitShowRaw":			GeneralNIFIDParam[0] = checked			break		case "SD2":			GeneralNIFIDParam[5] = checked			break		case "AFPFgpib":			NIFIDParam[10]=checked			CheckBox	 AFPFgpib, 			 value = checked			CheckBox	 AFPFni, 		 	value = (!checked)			SetVariable 	GPIBaa2,			disable=0			SetVariable 	AFPFA0chan,		disable=1			SetVariable	AFPFSweepStop,	title="Freq. Range"			break		case "AFPFni":			NIFIDParam[10] = (!checked)			CheckBox	 AFPFgpib, 			 value = (!checked)			CheckBox	 AFPFni, 		 	value = (checked)			SetVariable 	GPIBaa2,			disable=1			SetVariable 	AFPFA0chan,		disable=0			SetVariable	AFPFSweepStop,	title="Freq. FWHM"			break		case "AFPFA0OutBfield":			NIFIDParam[32] = (!checked)			CheckBox	 AFPFA0OutRF, 			 value = (!checked)			CheckBox	 AFPFA0OutBfield, 		 	value = (checked)			if (NIFIDParam[32]==0)					//GPIB Control				SetVariable 	AFPFA0chan,	limits={0,3,1}				if (NIFIDParam[33]==0)					print "NOTE:  AO 0 is usually used for controling the main field."				endif				if (NIFIDParam[33]==1)					print "NOTE:  AO 1 is usually used for controlling the RF for FID."				endif			else				SetVariable 	AFPFA0chan,	limits={0,3,1}				if (NIFIDParam[33]==0)					print "NOTE:  AO 0 is usually used for controling the main field."				endif				NIFIDParam[33]=2			endif			break		case "AFPFA0OutRF":			NIFIDParam[32] = (checked)			CheckBox	 AFPFA0OutRF, 			 value = (checked)			CheckBox	 AFPFA0OutBfield, 		 	value = (!checked)			if (NIFIDParam[32]==0)				SetVariable 	AFPFA0chan,	limits={1,1,1}			else				SetVariable 	AFPFA0chan,	limits={0,1,1}			endif			break		default:			Print "ERROR in CheckBxProc:  ",ctrlName,"  not found"			break	endswitchEndFunction  NIFIDButtonProc(buttonname):  ButtonControl	string buttonname	wave  NIFIDParam, GeneralNIFIDParam, AmpHistory	wave/T GeneralNIFIDParamStrings, StringHistory 	WAVE PDirectionHistory	variable/g  NIFIDFuncGenDrive, FuncGenAFP, LockIn	string TmpCmdStr	variable/g tmpDeviceNum	variable/g PanelReturn	NVAR  NIFIDfuncgendrive,FuncGenAFP	NVAR NMRScanNum	variable startN	variable stopN	variable Nsweeps	string AFPLossStr		strswitch(buttonname)		// AFP PARAMETERS		case "NIFIDInitbutton":			execute "NIFIDparamInit()"			break					//CONTROL:  SINGLE		case "Singlebutton":				execute "NIFID()"				//execute "RemoveXupOffset()"		//Cludge...offset is added after return?			break		case "NIFIDFitbutton":			sprintf TmpCmdStr, "NIFIDfit(\"%s\")", GeneralNIFIDParamStrings[0]			execute(TmpCmdStr)			break		case "NIFIDFitTestbutton":			sprintf TmpCmdStr, "TestNIFIDfitParams_sineXY(\"%s\")", GeneralNIFIDParamStrings[0]			execute(TmpCmdStr)			break		case "NIFIDFitSetbutton":			NIFIDparam[12]=NIFIDparam[27]			NIFIDparam[13]=NIFIDparam[28]			NIFIDparam[14]=NIFIDparam[29]			NIFIDparam[15]=NIFIDparam[30]			NIFIDparam[16]=NIFIDparam[31]			break		case "GraphRbutton":			sprintf TmpCmdStr, "NIFIDDisplayRupGraph(\"%s\")", GeneralNIFIDParamStrings[0]			execute(TmpCmdStr)			break		case "GraphFFTbutton":			sprintf TmpCmdStr, "NIFIDfit_FFT(\"%s\")", GeneralNIFIDParamStrings[0]			execute(TmpCmdStr)			break		case "GraphRawbutton":			sprintf TmpCmdStr, "NIFIDDisplayRawGraph()"			execute(TmpCmdStr)			break		case "HelpButton":			sprintf TmpCmdStr, "HelpWindow()"			execute(TmpCmdStr)			break		case "GraphRawFFTbutton":			sprintf TmpCmdStr, "NIFIDDisplayRawFFTGraph()"			execute(TmpCmdStr)			break					//CONTROL: MULTIPLE		case "SDbutton":			sprintf TmpCmdStr, "NIFIDSpindown(%g)", GeneralNIFIDParam[7]			print TmpCmdStr			execute(TmpCmdStr)				//execute(Spindown(prewaithrs,firstwaithrs,secondwaithrs,waitinterval))			break		case "SDFitbutton":			sprintf TmpCmdStr, "NIFIDSpinDownFit(%g,%g, %g)", GeneralNIFIDParam[8],GeneralNIFIDParam[9], GeneralNIFIDParam[10]			execute(TmpCmdStr)			break		case "Lossbutton":			sprintf TmpCmdStr, "NIFIDLoss(%g)", GeneralNIFIDParam[11]			execute(TmpCmdStr)			break		case "LossFitbutton":			sprintf TmpCmdStr, "NIFIDLossFit(%g,%g )", GeneralNIFIDParam[12],GeneralNIFIDParam[13]			execute(TmpCmdStr)			break		case "LossTablebutton":			sprintf TmpCmdStr, "NIFIDLossTable( )"			execute(TmpCmdStr)			break		case "Ratebutton":			sprintf TmpCmdStr, "NIFIDPumpRate(%g)", GeneralNIFIDParam[15]			print TmpCmdStr			execute(TmpCmdStr)			break		case "RateFitbutton":			sprintf TmpCmdStr, "NIFIDRateFit(%g,%g)", GeneralNIFIDParam[18], GeneralNIFIDParam[19]			execute(TmpCmdStr)			break		case "RateTablebutton":			sprintf TmpCmdStr, "NIFIDRateTable( )"			execute(TmpCmdStr)			break		//CONTROL:  UTILITIES		case "BFieldbutton":			 NIFIDSetField(GeneralNIFIDParam[1])			break			case "UtilNIFIDInitbutton":			execute("NIFIDparamInit()")			break		case "UtilGPIBInitbutton":			execute("NIFIDafpGPIBinit()")			break		case "UtilgenInitbutton":			execute("GeneralNIFIDinit()")			break		case "UtilDIOinitbutton":			execute("NIFID_NIDAQinit()")			break		case "UtilDAQResetbutton":			execute("NIFIDDAQreset()")			break		case "UtilDAQerrorbutton":			execute("NIFIDDAQError()")			break		case "NIDAQdiobutton":			sprintf TmpCmdStr,  "NIFIDSetDigitalIO(%g,%g)", GeneralNIFIDParam[25],GeneralNIFIDParam[26]			execute(TmpCmdStr)  			break		case "GPIBaWritebutton":			sprintf TmpCmdStr, "NI488 ibfind \"%s\" %s",  GeneralNIFIDParamStrings[3],  "tmpDeviceNum"			print TmpCmdStr			execute(TmpCmdStr)			sprintf TmpCmdStr, "NIFIDWriteGPIB(%g,\"%s\")",   tmpDeviceNum, GeneralNIFIDParamStrings[1]			print TmpCmdStr			execute(TmpCmdStr)			break		case "GPIBaReadbutton":			sprintf TmpCmdStr, "NI488 ibfind \"%s\" %s",  GeneralNIFIDParamStrings[3], "tmpDeviceNum"			print TmpCmdStr			execute(TmpCmdStr)			sprintf TmpCmdStr, "GeneralNMRParam[33] =  NIFIDReadGPIB(%g,\"%s\")",   tmpDeviceNum, GeneralNIFIDParamStrings[2]			print TmpCmdStr			execute(TmpCmdStr)			break		case "KillWavesbutton":			sprintf TmpCmdStr, "NIFIDKillDataWaves(%g,%g)", GeneralNIFIDParam[21], GeneralNIFIDParam[22]			execute(TmpCmdStr)			break		case "UtilInit":			execute("init()")			break		case "UtilHistTablebutton":			execute ("NIFIDNMRhistory_table()")			break		case "UtilSaveHist":			sprintf TmpCmdStr, "NIFIDSaveHistoryFile(\"%s\")", GeneralNIFIDParamStrings[4]			execute(TmpCmdStr)			break		//   AFP B-SWEEP PANEL		case "AFPBSweepU":			variable Utimestep=1e-3			sprintf TmpCmdStr, "NIFIDFlipBRamp(%g,%g,%g)",GeneralNIFIDParam[34],GeneralNIFIDParam[35],GeneralNIFIDParam[36]			//	print tmpcmdstr			execute(TmpCmdStr)			 NIFIDParam[23]=3			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			NMRScanNum=NMRScanNum +1			StringHistory[NMRScanNum]="AFPB Sweep Up, Polarization Flip"			NIFIDParam[25]= (NIFIDParam[25] %^ 1)			break		case "AFPBSweepUD":			variable UDtimestep = 1e-3			variable AFPNsweeps = GeneralNIFIDParam[40]			variable i			for (i=0;i<AFPNsweeps;i=i+1)					sprintf TmpCmdStr, "NIFIDFlipBRamp(%g,%g,%g)",GeneralNIFIDParam[34],GeneralNIFIDParam[35],GeneralNIFIDParam[36]				execute(TmpCmdStr)				sleep/S GeneralNIFIDParam[37]				sprintf TmpCmdStr, "NIFIDFlipBRamp(%g,%g,%g)",GeneralNIFIDParam[35],GeneralNIFIDParam[34],GeneralNIFIDParam[36]				execute(TmpCmdStr) 				sleep/s GeneralNIFIDParam[37]			endfor			NMRScanNum=NMRScanNum +1			NIFIDParam[25]= (NIFIDParam[25] %^ 1)			StringHistory[NMRScanNum]="AFPB Sweep Up and Down, No Flip"+ num2str(AFPNsweeps) +" times"			NIFIDParam[25]= (NIFIDParam[25] %^ 1)			break		case "AFPBPrepField":			 NIFIDSetField(GeneralNIFIDParam[34])			 NIFIDParam[23]=1			 if (NIFIDParam[10]==0)			 	NIFIDParam[23]=2			 endif			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			break		case "AFPBPrepRF":			 NIFIDafpWrFuncGen_freq(FuncGenAFP,GeneralNIFIDParam[38])			 NIFIDafpWrFuncGen_ampl(FuncGenAFP,GeneralNIFIDParam[39])			 NIFIDParam[23]=2			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			break		case "AFPBResetRF":			 NIFIDafpWrFuncGen_freq(FuncGenAFP,1)			 NIFIDafpWrFuncGen_ampl(FuncGenAFP,.01)			 NIFIDParam[23]=4			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			break		case "AFPBResetField":			 NIFIDSetField(GeneralNIFIDParam[1])			 NIFIDParam[23]=0			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			break		case "AFPBOpenCtrlWindow":			sprintf TmpCmdStr, "AFPBPanel()"			execute(TmpCmdStr)			break		case "FIDBeforeAFPB":	 		sprintf TmpCmdStr, "NIFID()"			execute(TmpCmdStr)			GeneralNIFIDParam[23]=NMRScanNum			DoWindow/F AFPBPanel			break		case "FIDafterAFPB":	 		sprintf TmpCmdStr, "NIFID()"			execute(TmpCmdStr)			DoWindow/F AFPBPanel			GeneralNIFIDParam[24]=NMRScanNum			startN=GeneralNIFIDParam[23]			stopN=GeneralNIFIDParam[24]			Nsweeps=GeneralNIFIDParam[40]			sprintf AFPlossStr, "Loss = %.2g%", 100*((AmpHistory[startN]-AmpHistory[stopN] )/AmpHistory[startN]) /Nsweeps			TitleBox 		AFPLossStr, pos={210,495}, frame=0,	title=AFPLossStr			break	//AFP F-SWEEP PANEL	 	case "AFPFOpenCtrlWindow":	 		 NIFIDParam[24]=0	 		sprintf TmpCmdStr, "AFPFPanel()"			execute(TmpCmdStr)			break		case "CompleteAFPF":		 	AFPFloss()			break  		case "CompleteAFPFnoise":		 	print "still Under Construction"		 	AFPFlossNoise()			break		case "AFPlossFitbutton":		 	print "Under Construction"		 	AFPLossFit(GeneralNIFIDParam[46], GeneralNIFIDParam[47],GeneralNIFIDParam[48],GeneralNIFIDParam[49],GeneralNIFIDParam[40])			break		case "AFPlossTableButton":		 	print "Under Construction"		 	DoWindow/k AFPLossTable		 	edit/k=1 AFPLossData		 	DoWindow/c AFPLossTable			break		case "FIDbeforeAFPF":	 		sprintf TmpCmdStr, "NIFID()"			execute(TmpCmdStr)			GeneralNIFIDParam[23]=NMRScanNum			DoWindow/F AFPFPanel			break		case "AFPFSweep":			if (NIFIDParam[10]==1)				AFPFgpib()			else				NIAFPF()			endif			break		case "FIDafterAFPF":	 		sprintf TmpCmdStr, "NIFID()"			execute(TmpCmdStr)			DoWindow/F AFPFPanel			GeneralNIFIDParam[24]=NMRScanNum			startN=GeneralNIFIDParam[23]			stopN=GeneralNIFIDParam[24]			Nsweeps=GeneralNIFIDParam[40]			sprintf AFPlossStr, "Loss = %.2g%", 100*((AmpHistory[startN]-AmpHistory[stopN] )/AmpHistory[startN]) /Nsweeps			TitleBox 		AFPLossStr, pos={210,525}, frame=0,	title=AFPLossStr			break		case "Qscanbutton":			 NIQ(GeneralNIFIDParam[41], GeneralNIFIDParam[42], GeneralNIFIDParam[43])	 		//sprintf TmpCmdStr, "NIQ(%g, %g, %g)", GeneralNIFIDParam[41], GeneralNIFIDParam[42], GeneralNIFIDParam[43]			//execute(TmpCmdStr)			break		default:			Print buttonname, " not implimented"	endswitchendFunction  NIFIDPopUpProc(PopUpName, PopUpValue, PopUpString): PopUpMenuControl	string PopUpName	variable PopUpValue	string PopUpString	wave GeneralNMRParam,  NIFIDParam	strswitch(PopUpName)		case "NIFIDexpfitval":			ControlInfo  NIFIDexpfitval			 NIFIDParam[11]=V_value			break		case "NIFIDlockinVal":			ControlInfo  NIFIDlockinVal			 NIFIDParam[34]=V_value			break		case "NIFIDrfVal":			ControlInfo  NIFIDrfVal			 NIFIDParam[35]=V_value			break		default:			Print "Error in PopUp:", PopUpName			break	endswitchEnd// ====================Layouts============================Window  NIFIDNMR_loss_layout() : Layout	PauseUpdate; Silent 1		// building window...	Layout/C=1/W=(22,82,523,658) NMRLoss_graph(149,228,579,422)/O=1,xup_graph(297,46,576,230)/O=1 as "NMR Loss layout"	Append NMRLoss_table(219,424,579,724)/O=2	TextBox/N=text0/F=0/A=LB/X=22.36/Y=82.51 "NMR Loss\rLASER on, 135 degrees\r1/28/06 13:20\r#3 (wally?)\r135C"	AppendText "sweep rate = 1.5mV/1ms\rRF=9.8*10V"EndMacroWindow  NIFIDPumpRate_layout() : Layout	PauseUpdate; Silent 1		// building window...	Layout/C=1/W=(5.25,42.5,506.25,592.25) Rate_graph(86.25,141.75,533.25,378)/O=1,xup_graph(35.25,383.25,305.25,581.25)/O=1	Append NMRLoss_graph(305.25,383.25,558,579)/O=1	TextBox/N=text0/F=0/B=1/A=LB/X=4.98/Y=85.85 "Dilbert? in Main Field\r175 C\t4/24/07\rWex & Jordan\r NIFID w/reed relay\rB0 = 5.3Vcomputer+1V\rNo trim coils\r"EndMacroWindow  NIFIDSpinDown_layout() : Layout	PauseUpdate; Silent 1		// building window...	Layout/C=1/W=(11,71,512,647) Spindown(221,34,578,254)/O=1,SDtable(105,254,597,428)/O=2 as "spin down layout"	Append NMRLoss_graph(269,432,578,636)/O=1,NMRLoss_table(225,638,577,756)/O=2	TextBox/N=text0/F=0/B=1/A=LB/X=1.27/Y=80.03 "2/13/06\rMarcy\rCPol V2.0\rsweep rate = 1.5mV/1ms\r25C"	AppendText "16-17, Amp off, coil unplugged\r17-18, Amp off, coil on\r18-19 Amp on, coil on"	AppendText "19-22 Amp&coil off, B0=4.67A (5V)"	Append xup_graph(33,430,268,608)/O=1EndMacro// ======================== INDUCTANCE CALCULATIONS =================================function LoopInductance()	variable N, r, a		// N= number of turns, r = radius of loop, a = wire diameter  see http://www.technick.net	variable mu0=4*3.14159*1e-7			//H/m or Tm/A	variable L	N=150	r=0.015/2			// loop radius in m	a= 0.0003/2			// wire radius in m,  0.26/2 mm for 30 awg, 0.3/2 mm for 28awg	L=N^2*r*mu0*(ln(8*r/a) - 2.0)	printf "Inductance Estimate:  L= %.3g mH for N=%g, radius= %.3g cm, Wire radius = %.3g mm\r", L*1e3, N, r*100, a*1e3		variable freq = 30000	variable impedance	impedance = 2*3.14159*freq*L	printf "Impedance Estimate:  Z= %.3g ohm for L = %.3g mH at frequency %.3g kHz\r", impedance, L*1e3, freq*1e-3end	//============================ NI AFP  =============================function NIAFPF()	variable Ntimes	variable/g NMRScanNum	WAVE GeneralNIFIDParam, NIFIDParam	variable FIDbfield=	NIFIDParam[5]	variable AFPbfield=	GeneralNIFIDParam[29]	variable RFamp=		GeneralNIFIDParam[30]	variable Fcent=		GeneralNIFIDParam[31]	variable Ffwhm=		GeneralNIFIDParam[32]	variable Fmin, Fmax, Fsweeptime	variable Fsweeprate=		GeneralNIFIDParam[33]	variable NAFPSweeps=		GeneralNIFIDParam[40]//	variable/g FuncGenAFP//	string cmdstr	variable Waittime = 1				// Set Field	 NIFIDSetField(AFPbfield)									//AFPbfield=	GeneralNIFIDParam[29]	 	 	 //Run AFP Sweeps	printf "\t\tNI_AFP Frequency Sweep: \t"	variable j	for (j=1;j<=NAFPsweeps;j=j+1)												//NafpSweeps=		GeneralNIFIDParam[40]		sleep/s waittime		printf "%d, ", j		NIAFPFsweep(Fcent, Ffwhm, Fsweeprate, RFamp)	endfor	printf "\r"	//Bookeeping	NMRScanNum=NMRScanNum +1	WAVE/t StringHistory	StringHistory[NMRScanNum]="AFPF Sweep Up Pol Flip" + num2str(NAFPsweeps) +" times"	if (mod(NAFPsweeps,2) == 1)		NIFIDParam[25]= (NIFIDParam[25] %^ 1)				//Toggle polarization direction	endif	//Reset Func Gen and fielsd	NIFIDSetField( FIDbfield)							//FIDbfield=	NIFIDParam[5]end	function  NIAFPFsweep(Fcent, Ffwhm, FsweepRate, RFamp )	//Sends swept RF out of an analog output from an NI-DAQ board	//Put the RF into an RF amplifier for AFP.  GJones, July 9, 2009	//NOTE:  I run this on a second NI Board because I ran out of Outputs on my first board.  See DevName and NIchan.	variable Fcent, Ffwhm, FsweepRate,RFamp				//Fsweeprate in KHz	WAVE NIFIDParam	variable Fmin, Fmax, Frange	variable AOtimestep = 1e-6			// Set DAC frequency for analog output pulse.  	String DevName = "Dev1"				// You can use a second board for the AFP RF	variable NIchan = NIFIDParam[33]		// Most boards have 2 outputs, but some systems control B0, FID-RF, and AFP-RF.  	variable npnts, totaltime		FsweepRate = 1000*Fsweeprate		Fmin= 0.6*Fcent		//Make sure that you don't start below 0.5*Fresonance because harmonics will sweep through resonance	Fmax=1.4*Fcent		//Arbitrarily far away		fDAQmx_WaveformStop(DevName)	sleep/s 0.2	//Set Up DSP output wave	npnts =((Fmax-Fmin)/FsweepRate )/AOtimestep	totaltime = (Fmax-Fmin)/FsweepRate	make/o/n=(npnts+1) AFPFOutWave	setscale/p x, 0, AOtimestep, "sec", AFPFOutWave			//GENERATE WAVEFORM		//Freq = Fmin+FsweepRate*x 	//Amplitude = exp( (x-Fcent)^2/Ffwhm^2 )  = exp( -1* ((Fmin + FsweepRate*x)-Fcent)^2/Ffwhm^2 )			//Note factor of 2 in rate to keep peak in correct place	AFPFOutWave = RFamp*exp( -1* ((Fmin + FsweepRate*x)-Fcent)^2/Ffwhm^2 )	*	sin(2*3.14159*(Fmin +0.5*FsweepRate*x)*x)	 	//AFPFOutWave = sin(2*3.14159*(Fmin +0.5*FsweepRate*x)*x)	 	//Generate RF output. 	string cmd	sprintf cmd "AFPFOutWave, %d, %d,%d", NIchan, -10, 10	//DAQmx_WaveformGen /DEV="DEV1" /NPRD=1 /STRT  "AFPFOutWave, 0, -10, 10"			DAQmx_WaveformGen /DEV=DevName /NPRD=1 /STRT  cmd	sleep/s (totaltime + 0.4)		//GOOFY PLOT TO SHOW YOU WHAT YOU DID	DoWindow/k AFPF_RF 	variable x0=30, y0=320, dx=250, dy=100	setscale/i x, Fmin, Fmax, AFPFOutWave	display/k=1/w=(x0, y0, x0+dx, y0+dy) AFPFOutWave	DoWindow/C AFPF_RFend										//========================================= aCORN magnetometer ======================// ========================================= GPIB FUNCTIONS ======================================================function GPIBinit()	string cmdstr	variable/g FIDFuncGenDrive_device	variable GPIBaddress = 10	//NOTE:  Don't Use Dev1 (this is the daq board)     //use  "print   fDAQmx_devicenames()" to determine DAQ board name.  default = "dev1"	// GPIB Board	variable/g GPIBboardDescriptor	NI4882 ibfind={"gpib0"}; GPIBboardDescriptor = V_flag	GPIB2 board=GPIBboardDescriptor		// FUNCTION GENERATOR SETUP: DRIVE	GPIB2 board=GPIBboardDescriptor	NI4882 ibfind=("dev"+num2str(GPIBaddress))	FIDFuncGenDrive_device = V_flag		//print "frog"		return FIDfuncGenDrive_device	EndFunction FIDWrFuncGen_ampl(val)	variable val	variable/g FIDFuncGenDrive_device	string command			sprintf command, "AMPL %5.3fVp",val				//if using SRS345drive		FIDWriteGPIB(FIDFuncGenDrive_device,command)	endFunction FIDWrFuncGen_freq(val)	variable  val	variable/g FIDFuncGenDrive_device	string command		sprintf command, "FREQ %20.8f3",val					//if using SRS345drive		FIDWriteGPIB(FIDFuncGenDrive_device,command)		//if using SRS345driveend//=======================General GPIB Functionsfunction FIDReadGPIB(theDevice, RequestCommand)	// Error if replies stack up, only takes the first in the stack	variable theDevice;	string RequestCommand	string command;	string/g GPIBin	variable/g V_flag		sprintf command "GPIB device %d", theDevice ; Execute command;	Execute "GPIB deviceclear";	sprintf command "GPIBwrite \"%s\" ",RequestCommand ;	Execute command;	sprintf command "GPIBRead/T=\"\\n\" GPIBin";	//Note:  look for "\n" to end transmission	Execute command;	//print "GPIB Reply String:  ", GPIBin, V_flag	Execute "GPIB gotolocal"	// Extract the proper response:  Leave the actual response in GPIBin for future reference	// Note:  HPFREQ SYNTH HAS LEADING ALPHA   "."==46, "-"==45,  " "==32, "E"==69, "e"==101	string replystr, tempstr=""	variable replynum	replystr = GPIBin 	variable n=0, i=0	do		if (numtype(str2num(replystr[n]))==0 )			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==46) %| (char2num(replystr[n])==45) )			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==32) %|(char2num(replystr[n])==101))			tempstr[i]=replystr[n]; i=i+1		endif		if ( (char2num(replystr[n])==69)  )			tempstr[i]=replystr[n]; i=i+1		endif		n=n+1	while (n<strlen(replystr))	replystr = tempstr	//END of Alpha removal		replynum=str2num(replystr)	return(replynum);Endfunction FIDWriteGPIB(theDevice, WriteCommand)	variable theDevice	string WriteCommand	string command	GPIB2 device=theDevice	GPIB2 deviceclear	GPIBwrite2 Writecommand	GPIB2 gotolocal	//sprintf command "GPIB device %d", theDevice ; Execute command;	//Execute "GPIB deviceclear";	//sprintf command "GPIBwrite \"%s\" ",WriteCommand;   Execute command;	//Execute "GPIB gotolocal"End